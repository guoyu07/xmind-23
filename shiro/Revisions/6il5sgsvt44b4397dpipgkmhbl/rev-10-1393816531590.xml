<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="6il5sgsvt44b4397dpipgkmhbl" timestamp="1393816440192" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="6crke48nk7btn8hfvn2coajn5n" structure-class="org.xmind.ui.map.clockwise" timestamp="1393813265226"><title>SHIRO</title><children><topics type="attached"><topic id="7m0h3f37nhu7pf6n6qocp1jjvd" timestamp="1393811898481"><title>1、身份验证</title><notes><html><xhtml:p>1、根据ini配置文件初始化SecurityMangerFactory</xhtml:p><xhtml:p>		Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = new IniSecurityManagerFactory(configFile);</xhtml:p><xhtml:p/><xhtml:p>2、获得SecurityManager示例，并绑定到SecurityUtils</xhtml:p><xhtml:p>        org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();</xhtml:p><xhtml:p>        SecurityUtils.setSecurityManager(securityManager);</xhtml:p><xhtml:p/><xhtml:p>3、得到subject，以及创建用户名/密码身份验证Token（即用户身份/凭证）</xhtml:p><xhtml:p>		Subject subject = SecurityUtils.getSubject();</xhtml:p><xhtml:p>        UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");</xhtml:p><xhtml:p/><xhtml:p>4、进行登录</xhtml:p><xhtml:p>        subject.login(token);</xhtml:p><xhtml:p/><xhtml:p>5、登录成功</xhtml:p><xhtml:p>		Assert.assertEquals(true, subject.isAuthenticated()); //断言用户已经登录</xhtml:p><xhtml:p/><xhtml:p>6、退出</xhtml:p><xhtml:p>		subject.logout();</xhtml:p><xhtml:p/></html><plain>1、根据ini配置文件初始化SecurityMangerFactory
		Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = new IniSecurityManagerFactory(configFile);

2、获得SecurityManager示例，并绑定到SecurityUtils
        org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();
        SecurityUtils.setSecurityManager(securityManager);

3、得到subject，以及创建用户名/密码身份验证Token（即用户身份/凭证）
		Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");

4、进行登录
        subject.login(token);

5、登录成功
		Assert.assertEquals(true, subject.isAuthenticated()); //断言用户已经登录

6、退出
		subject.logout();
</plain></notes><children><topics type="attached"><topic id="74t11om6evhhgkhnfmkslpda8h" timestamp="1393811896184"><title>1、ini配置文件</title><children><topics type="attached"><topic id="7baoj5vtt5ebcjf1006s3dcmk4" timestamp="1393811740620"><title>1、配置用户身份/凭证</title><notes><html><xhtml:p>#配置用户身份、凭证</xhtml:p><xhtml:p>[users]</xhtml:p><xhtml:p>zhang=123</xhtml:p><xhtml:p>wang=123</xhtml:p><xhtml:p/><xhtml:p/></html><plain>#配置用户身份、凭证
[users]
zhang=123
wang=123

</plain></notes></topic><topic id="7l5t2c4e2bckrop80bl50koqi5" timestamp="1393811728567"><title>2、配置realm</title><notes><html><xhtml:p>[main]</xhtml:p><xhtml:p>dataSource=com.alibaba.druid.pool.DruidDataSource</xhtml:p><xhtml:p>dataSource.driverClassName=com.mysql.jdbc.Driver</xhtml:p><xhtml:p>dataSource.url=jdbc:mysql://localhost:3306/shiro</xhtml:p><xhtml:p>dataSource.username=root</xhtml:p><xhtml:p>dataSource.password=111111</xhtml:p><xhtml:p/><xhtml:p>jdbcRealm=<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">org.apache.shiro.realm.jdbc.JdbcRealm</xhtml:span></xhtml:p><xhtml:p>jdbcRealm.dataSource=$dataSource</xhtml:p><xhtml:p/><xhtml:p>myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2</xhtml:p><xhtml:p/><xhtml:p>#指定securityManager的realms实现</xhtml:p><xhtml:p>securityManager.realms=$jdbcRealm,$myRealm2</xhtml:p></html><plain>[main]
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=root
dataSource.password=111111

jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource

myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2

#指定securityManager的realms实现
securityManager.realms=$jdbcRealm,$myRealm2</plain></notes></topic></topics></children></topic><topic id="5ig9b36o6rg0p6r070nf46s6s5" timestamp="1393812908719"><title>2、验证器authenticator及验证策略</title><children><topics type="attached"><topic id="7l4m8eejreo0ap5ck1kkk5cgml" timestamp="1393812408384"><title>1、验证器</title><notes><html><xhtml:p>验证器（org.apache.shiro.authc.pam.ModularRealmAuthenticator）如果只有多个realm，则需要验证策略</xhtml:p><xhtml:p/><xhtml:p>默认的验证策略是至少一个验证通过：</xhtml:p><xhtml:p>	public ModularRealmAuthenticator() {</xhtml:p><xhtml:p>        this.authenticationStrategy = new AtLeastOneSuccessfulStrategy();</xhtml:p><xhtml:p>    }</xhtml:p><xhtml:p/><xhtml:p>自定义的验证策略，需要实现接口org.apache.shiro.authc.pam.AuthenticationStrategy</xhtml:p><xhtml:p/><xhtml:p>验证器可以添加多个监听器org.apache.shiro.authc.AuthenticationListener</xhtml:p><xhtml:p>监听验证成功，验证失败，退出logout等事件</xhtml:p></html><plain>验证器（org.apache.shiro.authc.pam.ModularRealmAuthenticator）如果只有多个realm，则需要验证策略

默认的验证策略是至少一个验证通过：
	public ModularRealmAuthenticator() {
        this.authenticationStrategy = new AtLeastOneSuccessfulStrategy();
    }

自定义的验证策略，需要实现接口org.apache.shiro.authc.pam.AuthenticationStrategy

验证器可以添加多个监听器org.apache.shiro.authc.AuthenticationListener
监听验证成功，验证失败，退出logout等事件</plain></notes></topic><topic id="02vksapsc5tdb3hoh0dkhg741o" timestamp="1393812747625"><title>2、验证策略</title><notes><html><xhtml:p>1、所有realm通过org.apache.shiro.authc.pam.AllSuccessfulStrategy</xhtml:p><xhtml:p/><xhtml:p>2、至少一个realm验证通过org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy</xhtml:p><xhtml:p>		如果org.apache.shiro.authc.AuthenticationInfo实现了接口org.apache.shiro.authc.MergableAuthenticationInfo</xhtml:p><xhtml:p>		则会提供一个合并所有通过的AuthenticationInfo的merge方法</xhtml:p><xhtml:p/><xhtml:p>3、第一个通过验证org.apache.shiro.authc.pam.FirstSuccessfulStrategy</xhtml:p><xhtml:p>		取第一个通过的AuthenticationInfo，不进行merge</xhtml:p><xhtml:p/></html><plain>1、所有realm通过org.apache.shiro.authc.pam.AllSuccessfulStrategy

2、至少一个realm验证通过org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
		如果org.apache.shiro.authc.AuthenticationInfo实现了接口org.apache.shiro.authc.MergableAuthenticationInfo
		则会提供一个合并所有通过的AuthenticationInfo的merge方法

3、第一个通过验证org.apache.shiro.authc.pam.FirstSuccessfulStrategy
		取第一个通过的AuthenticationInfo，不进行merge
</plain></notes></topic><topic id="1v4gifpo7j1kq4n3jvbmjqgbuk" timestamp="1393812881962"><title>3、验证监听器</title><notes><html><xhtml:p>可配置多个监听器org.apache.shiro.authc.AuthenticationListener</xhtml:p></html><plain>可配置多个监听器org.apache.shiro.authc.AuthenticationListener</plain></notes></topic><topic id="1g2vov7usg2vbeu2ai8qdjg6vr" timestamp="1393813163043"><title>4、ini配置</title><notes><html><xhtml:p>[main]</xhtml:p><xhtml:p>#创建验证器，ModularRealmAuthenticator是abstract类org.apache.shiro.mgt.AuthenticatingSecurityManager的默认实现</xhtml:p><xhtml:p>authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator</xhtml:p><xhtml:p/><xhtml:p>#创建验证策略</xhtml:p><xhtml:p>allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy</xhtml:p><xhtml:p/><xhtml:p>authenticator.authenticationStrategy=$allSuccessfulStrategy</xhtml:p><xhtml:p/><xhtml:p>#指定securityManager的authenticator实现</xhtml:p><xhtml:p>securityManager.authenticator=$authenticator</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm"/></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">        //得到一个身份集合，因为myRealm1和myRealm4返回的身份一样所以输出时只返回一个</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">        PrincipalCollection principalCollection = subject.getPrincipals();</xhtml:span></xhtml:p></html><plain>[main]
#创建验证器，ModularRealmAuthenticator是abstract类org.apache.shiro.mgt.AuthenticatingSecurityManager的默认实现
authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator

#创建验证策略
allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy

authenticator.authenticationStrategy=$allSuccessfulStrategy

#指定securityManager的authenticator实现
securityManager.authenticator=$authenticator



        //得到一个身份集合，因为myRealm1和myRealm4返回的身份一样所以输出时只返回一个
        PrincipalCollection principalCollection = subject.getPrincipals();</plain></notes></topic></topics></children></topic><topic id="5b8hse4et69bsh0mvebg24v0sn" timestamp="1393813262403"><title>3、realm</title></topic></topics></children></topic><topic id="1t5vu08deb3587gehnrltgt4il" timestamp="1393816383911"><title>2、授权</title><children><topics type="attached"><topic id="6e5kimdlctlvuka0r5udu9p1g4" timestamp="1393816119500"><title>1、ini</title><notes><html><xhtml:p>[main]</xhtml:p><xhtml:p>#自定义authorizer，注意和org.apache.shiro.authc.pam.<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">ModularRealmAuthenticator</xhtml:span>区别</xhtml:p><xhtml:p>authorizer=org.apache.shiro.authz.<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">ModularRealmAuthorizer</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm"/></xhtml:p><xhtml:p>#自定义permissionResolver</xhtml:p><xhtml:p>#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver</xhtml:p><xhtml:p>permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver</xhtml:p><xhtml:p>authorizer.<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">permissionResolver</xhtml:span>=$permissionResolver</xhtml:p><xhtml:p>#自定义rolePermissionResolver</xhtml:p><xhtml:p>rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver</xhtml:p><xhtml:p>authorizer.<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">rolePermissionResolver</xhtml:span>=$rolePermissionResolver</xhtml:p><xhtml:p/><xhtml:p>securityManager.authorizer=$authorizer</xhtml:p><xhtml:p/><xhtml:p>#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）</xhtml:p><xhtml:p>realm=com.github.zhangkaitao.shiro.chapter3.realm.MyRealm</xhtml:p><xhtml:p>securityManager.realms=$realm</xhtml:p><xhtml:p/></html><plain>[main]
#自定义authorizer，注意和org.apache.shiro.authc.pam.ModularRealmAuthenticator区别
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer

#自定义permissionResolver
#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver
authorizer.permissionResolver=$permissionResolver
#自定义rolePermissionResolver
rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver=$rolePermissionResolver

securityManager.authorizer=$authorizer

#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）
realm=com.github.zhangkaitao.shiro.chapter3.realm.MyRealm
securityManager.realms=$realm
</plain></notes></topic><topic id="11iqqvuocsi8it81n63g4n229b" timestamp="1393816417745"><title>2、授权器</title><notes><html><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">org.apache.shiro.authz.ModularRealmAuthorizer</xhtml:span></xhtml:p><xhtml:p>[main]</xhtml:p><xhtml:p>#自定义authorizer</xhtml:p><xhtml:p>authorizer=org.apache.shiro.authz.ModularRealmAuthorizer</xhtml:p><xhtml:p>#自定义permissionResolver</xhtml:p><xhtml:p>#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver</xhtml:p><xhtml:p>permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver</xhtml:p><xhtml:p>authorizer.permissionResolver=$permissionResolver</xhtml:p><xhtml:p>#自定义rolePermissionResolver</xhtml:p><xhtml:p>rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver</xhtml:p><xhtml:p>authorizer.rolePermissionResolver=$rolePermissionResolver</xhtml:p><xhtml:p/><xhtml:p>securityManager.authorizer=$authorizer</xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm"/></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）</xhtml:span></xhtml:p><xhtml:p>jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm</xhtml:p><xhtml:p>dataSource=com.alibaba.druid.pool.DruidDataSource</xhtml:p><xhtml:p>dataSource.driverClassName=com.mysql.jdbc.Driver</xhtml:p><xhtml:p>dataSource.url=jdbc:mysql://localhost:3306/shiro</xhtml:p><xhtml:p>dataSource.username=root</xhtml:p><xhtml:p>dataSource.password=111111</xhtml:p><xhtml:p>jdbcRealm.dataSource=$dataSource<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm"/></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">jdbcRealm.permissionsLookupEnabled=true</xhtml:span></xhtml:p><xhtml:p>securityManager.realms=$jdbcRealm</xhtml:p><xhtml:p/></html><plain>org.apache.shiro.authz.ModularRealmAuthorizer
[main]
#自定义authorizer
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
#自定义permissionResolver
#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver
authorizer.permissionResolver=$permissionResolver
#自定义rolePermissionResolver
rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver=$rolePermissionResolver

securityManager.authorizer=$authorizer

#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=root
dataSource.password=111111
jdbcRealm.dataSource=$dataSource
jdbcRealm.permissionsLookupEnabled=true
securityManager.realms=$jdbcRealm
</plain></notes></topic><topic id="0495dl24r4u79n02tna4g0brms" timestamp="1393816440192"><title>3、验证role，permission</title></topic></topics></children></topic></topics></children></topic><title>画布 1</title></sheet></xmap-revision-content>