<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="6il5sgsvt44b4397dpipgkmhbl" timestamp="1393818262865" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="6crke48nk7btn8hfvn2coajn5n" structure-class="org.xmind.ui.map.clockwise" timestamp="1393817129676"><title>SHIRO</title><children><topics type="attached"><topic id="7m0h3f37nhu7pf6n6qocp1jjvd" timestamp="1393811898481"><title>1、身份验证</title><notes><html><xhtml:p>1、根据ini配置文件初始化SecurityMangerFactory</xhtml:p><xhtml:p>		Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = new IniSecurityManagerFactory(configFile);</xhtml:p><xhtml:p/><xhtml:p>2、获得SecurityManager示例，并绑定到SecurityUtils</xhtml:p><xhtml:p>        org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();</xhtml:p><xhtml:p>        SecurityUtils.setSecurityManager(securityManager);</xhtml:p><xhtml:p/><xhtml:p>3、得到subject，以及创建用户名/密码身份验证Token（即用户身份/凭证）</xhtml:p><xhtml:p>		Subject subject = SecurityUtils.getSubject();</xhtml:p><xhtml:p>        UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");</xhtml:p><xhtml:p/><xhtml:p>4、进行登录</xhtml:p><xhtml:p>        subject.login(token);</xhtml:p><xhtml:p/><xhtml:p>5、登录成功</xhtml:p><xhtml:p>		Assert.assertEquals(true, subject.isAuthenticated()); //断言用户已经登录</xhtml:p><xhtml:p/><xhtml:p>6、退出</xhtml:p><xhtml:p>		subject.logout();</xhtml:p><xhtml:p/></html><plain>1、根据ini配置文件初始化SecurityMangerFactory
		Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = new IniSecurityManagerFactory(configFile);

2、获得SecurityManager示例，并绑定到SecurityUtils
        org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();
        SecurityUtils.setSecurityManager(securityManager);

3、得到subject，以及创建用户名/密码身份验证Token（即用户身份/凭证）
		Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");

4、进行登录
        subject.login(token);

5、登录成功
		Assert.assertEquals(true, subject.isAuthenticated()); //断言用户已经登录

6、退出
		subject.logout();
</plain></notes><children><topics type="attached"><topic id="74t11om6evhhgkhnfmkslpda8h" timestamp="1393811896184"><title>1、ini配置文件</title><children><topics type="attached"><topic id="7baoj5vtt5ebcjf1006s3dcmk4" timestamp="1393811740620"><title>1、配置用户身份/凭证</title><notes><html><xhtml:p>#配置用户身份、凭证</xhtml:p><xhtml:p>[users]</xhtml:p><xhtml:p>zhang=123</xhtml:p><xhtml:p>wang=123</xhtml:p><xhtml:p/><xhtml:p/></html><plain>#配置用户身份、凭证
[users]
zhang=123
wang=123

</plain></notes></topic><topic id="7l5t2c4e2bckrop80bl50koqi5" timestamp="1393811728567"><title>2、配置realm</title><notes><html><xhtml:p>[main]</xhtml:p><xhtml:p>dataSource=com.alibaba.druid.pool.DruidDataSource</xhtml:p><xhtml:p>dataSource.driverClassName=com.mysql.jdbc.Driver</xhtml:p><xhtml:p>dataSource.url=jdbc:mysql://localhost:3306/shiro</xhtml:p><xhtml:p>dataSource.username=root</xhtml:p><xhtml:p>dataSource.password=111111</xhtml:p><xhtml:p/><xhtml:p>jdbcRealm=<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">org.apache.shiro.realm.jdbc.JdbcRealm</xhtml:span></xhtml:p><xhtml:p>jdbcRealm.dataSource=$dataSource</xhtml:p><xhtml:p/><xhtml:p>myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2</xhtml:p><xhtml:p/><xhtml:p>#指定securityManager的realms实现</xhtml:p><xhtml:p>securityManager.realms=$jdbcRealm,$myRealm2</xhtml:p></html><plain>[main]
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=root
dataSource.password=111111

jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource

myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2

#指定securityManager的realms实现
securityManager.realms=$jdbcRealm,$myRealm2</plain></notes></topic></topics></children></topic><topic id="5ig9b36o6rg0p6r070nf46s6s5" timestamp="1393812908719"><title>2、验证器authenticator及验证策略</title><children><topics type="attached"><topic id="7l4m8eejreo0ap5ck1kkk5cgml" timestamp="1393812408384"><title>1、验证器</title><notes><html><xhtml:p>验证器（org.apache.shiro.authc.pam.ModularRealmAuthenticator）如果只有多个realm，则需要验证策略</xhtml:p><xhtml:p/><xhtml:p>默认的验证策略是至少一个验证通过：</xhtml:p><xhtml:p>	public ModularRealmAuthenticator() {</xhtml:p><xhtml:p>        this.authenticationStrategy = new AtLeastOneSuccessfulStrategy();</xhtml:p><xhtml:p>    }</xhtml:p><xhtml:p/><xhtml:p>自定义的验证策略，需要实现接口org.apache.shiro.authc.pam.AuthenticationStrategy</xhtml:p><xhtml:p/><xhtml:p>验证器可以添加多个监听器org.apache.shiro.authc.AuthenticationListener</xhtml:p><xhtml:p>监听验证成功，验证失败，退出logout等事件</xhtml:p></html><plain>验证器（org.apache.shiro.authc.pam.ModularRealmAuthenticator）如果只有多个realm，则需要验证策略

默认的验证策略是至少一个验证通过：
	public ModularRealmAuthenticator() {
        this.authenticationStrategy = new AtLeastOneSuccessfulStrategy();
    }

自定义的验证策略，需要实现接口org.apache.shiro.authc.pam.AuthenticationStrategy

验证器可以添加多个监听器org.apache.shiro.authc.AuthenticationListener
监听验证成功，验证失败，退出logout等事件</plain></notes></topic><topic id="02vksapsc5tdb3hoh0dkhg741o" timestamp="1393812747625"><title>2、验证策略</title><notes><html><xhtml:p>1、所有realm通过org.apache.shiro.authc.pam.AllSuccessfulStrategy</xhtml:p><xhtml:p/><xhtml:p>2、至少一个realm验证通过org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy</xhtml:p><xhtml:p>		如果org.apache.shiro.authc.AuthenticationInfo实现了接口org.apache.shiro.authc.MergableAuthenticationInfo</xhtml:p><xhtml:p>		则会提供一个合并所有通过的AuthenticationInfo的merge方法</xhtml:p><xhtml:p/><xhtml:p>3、第一个通过验证org.apache.shiro.authc.pam.FirstSuccessfulStrategy</xhtml:p><xhtml:p>		取第一个通过的AuthenticationInfo，不进行merge</xhtml:p><xhtml:p/></html><plain>1、所有realm通过org.apache.shiro.authc.pam.AllSuccessfulStrategy

2、至少一个realm验证通过org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
		如果org.apache.shiro.authc.AuthenticationInfo实现了接口org.apache.shiro.authc.MergableAuthenticationInfo
		则会提供一个合并所有通过的AuthenticationInfo的merge方法

3、第一个通过验证org.apache.shiro.authc.pam.FirstSuccessfulStrategy
		取第一个通过的AuthenticationInfo，不进行merge
</plain></notes></topic><topic id="1v4gifpo7j1kq4n3jvbmjqgbuk" timestamp="1393812881962"><title>3、验证监听器</title><notes><html><xhtml:p>可配置多个监听器org.apache.shiro.authc.AuthenticationListener</xhtml:p></html><plain>可配置多个监听器org.apache.shiro.authc.AuthenticationListener</plain></notes></topic><topic id="1g2vov7usg2vbeu2ai8qdjg6vr" timestamp="1393813163043"><title>4、ini配置</title><notes><html><xhtml:p>[main]</xhtml:p><xhtml:p>#创建验证器，ModularRealmAuthenticator是abstract类org.apache.shiro.mgt.AuthenticatingSecurityManager的默认实现</xhtml:p><xhtml:p>authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator</xhtml:p><xhtml:p/><xhtml:p>#创建验证策略</xhtml:p><xhtml:p>allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy</xhtml:p><xhtml:p/><xhtml:p>authenticator.authenticationStrategy=$allSuccessfulStrategy</xhtml:p><xhtml:p/><xhtml:p>#指定securityManager的authenticator实现</xhtml:p><xhtml:p>securityManager.authenticator=$authenticator</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm"/></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">        //得到一个身份集合，因为myRealm1和myRealm4返回的身份一样所以输出时只返回一个</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">        PrincipalCollection principalCollection = subject.getPrincipals();</xhtml:span></xhtml:p></html><plain>[main]
#创建验证器，ModularRealmAuthenticator是abstract类org.apache.shiro.mgt.AuthenticatingSecurityManager的默认实现
authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator

#创建验证策略
allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy

authenticator.authenticationStrategy=$allSuccessfulStrategy

#指定securityManager的authenticator实现
securityManager.authenticator=$authenticator



        //得到一个身份集合，因为myRealm1和myRealm4返回的身份一样所以输出时只返回一个
        PrincipalCollection principalCollection = subject.getPrincipals();</plain></notes></topic></topics></children></topic><topic id="5b8hse4et69bsh0mvebg24v0sn" timestamp="1393813262403"><title>3、realm</title></topic></topics></children></topic><topic id="1t5vu08deb3587gehnrltgt4il" timestamp="1393816383911"><title>2、授权</title><children><topics type="attached"><topic id="6e5kimdlctlvuka0r5udu9p1g4" timestamp="1393816119500"><title>1、ini</title><notes><html><xhtml:p>[main]</xhtml:p><xhtml:p>#自定义authorizer，注意和org.apache.shiro.authc.pam.<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">ModularRealmAuthenticator</xhtml:span>区别</xhtml:p><xhtml:p>authorizer=org.apache.shiro.authz.<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">ModularRealmAuthorizer</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm"/></xhtml:p><xhtml:p>#自定义permissionResolver</xhtml:p><xhtml:p>#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver</xhtml:p><xhtml:p>permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver</xhtml:p><xhtml:p>authorizer.<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">permissionResolver</xhtml:span>=$permissionResolver</xhtml:p><xhtml:p>#自定义rolePermissionResolver</xhtml:p><xhtml:p>rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver</xhtml:p><xhtml:p>authorizer.<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">rolePermissionResolver</xhtml:span>=$rolePermissionResolver</xhtml:p><xhtml:p/><xhtml:p>securityManager.authorizer=$authorizer</xhtml:p><xhtml:p/><xhtml:p>#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）</xhtml:p><xhtml:p>realm=com.github.zhangkaitao.shiro.chapter3.realm.MyRealm</xhtml:p><xhtml:p>securityManager.realms=$realm</xhtml:p><xhtml:p/></html><plain>[main]
#自定义authorizer，注意和org.apache.shiro.authc.pam.ModularRealmAuthenticator区别
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer

#自定义permissionResolver
#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver
authorizer.permissionResolver=$permissionResolver
#自定义rolePermissionResolver
rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver=$rolePermissionResolver

securityManager.authorizer=$authorizer

#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）
realm=com.github.zhangkaitao.shiro.chapter3.realm.MyRealm
securityManager.realms=$realm
</plain></notes></topic><topic id="11iqqvuocsi8it81n63g4n229b" timestamp="1393816417745"><title>2、授权器</title><notes><html><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">org.apache.shiro.authz.ModularRealmAuthorizer</xhtml:span></xhtml:p><xhtml:p>[main]</xhtml:p><xhtml:p>#自定义authorizer</xhtml:p><xhtml:p>authorizer=org.apache.shiro.authz.ModularRealmAuthorizer</xhtml:p><xhtml:p>#自定义permissionResolver</xhtml:p><xhtml:p>#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver</xhtml:p><xhtml:p>permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver</xhtml:p><xhtml:p>authorizer.permissionResolver=$permissionResolver</xhtml:p><xhtml:p>#自定义rolePermissionResolver</xhtml:p><xhtml:p>rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver</xhtml:p><xhtml:p>authorizer.rolePermissionResolver=$rolePermissionResolver</xhtml:p><xhtml:p/><xhtml:p>securityManager.authorizer=$authorizer</xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm"/></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）</xhtml:span></xhtml:p><xhtml:p>jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm</xhtml:p><xhtml:p>dataSource=com.alibaba.druid.pool.DruidDataSource</xhtml:p><xhtml:p>dataSource.driverClassName=com.mysql.jdbc.Driver</xhtml:p><xhtml:p>dataSource.url=jdbc:mysql://localhost:3306/shiro</xhtml:p><xhtml:p>dataSource.username=root</xhtml:p><xhtml:p>dataSource.password=111111</xhtml:p><xhtml:p>jdbcRealm.dataSource=$dataSource<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm"/></xhtml:p><xhtml:p><xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">jdbcRealm.permissionsLookupEnabled=true</xhtml:span></xhtml:p><xhtml:p>securityManager.realms=$jdbcRealm</xhtml:p><xhtml:p/></html><plain>org.apache.shiro.authz.ModularRealmAuthorizer
[main]
#自定义authorizer
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
#自定义permissionResolver
#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
permissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver
authorizer.permissionResolver=$permissionResolver
#自定义rolePermissionResolver
rolePermissionResolver=com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver=$rolePermissionResolver

securityManager.authorizer=$authorizer

#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=root
dataSource.password=111111
jdbcRealm.dataSource=$dataSource
jdbcRealm.permissionsLookupEnabled=true
securityManager.realms=$jdbcRealm
</plain></notes></topic><topic id="0495dl24r4u79n02tna4g0brms" timestamp="1393816653087"><title>3、验证role，permission</title><notes><html><xhtml:p/><xhtml:p>        //判断拥有权限：user:create</xhtml:p><xhtml:p>        Assert.assertTrue(subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">isPermitted</xhtml:span>("user:create"));</xhtml:p><xhtml:p>        //判断拥有权限：user:update and user:delete</xhtml:p><xhtml:p>        Assert.assertTrue(subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">isPermittedAll</xhtml:span>("user:update", "user:delete"));</xhtml:p><xhtml:p>        subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">checkPermission</xhtml:span>("user:create");</xhtml:p><xhtml:p>        subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">checkPermissions</xhtml:span>("user:update:1", "user:delete:1", "user:view:1");</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>		// 判断拥有角色：role1</xhtml:p><xhtml:p>		Assert.assertTrue(subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">hasRole</xhtml:span>("role1"));</xhtml:p><xhtml:p>		// 判断拥有角色：role1 and role2</xhtml:p><xhtml:p>		Assert.assertTrue(subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">hasAllRoles</xhtml:span>(Arrays.asList("role1", "role2")));</xhtml:p><xhtml:p>		// 判断拥有角色：role1 and role2 and !role3</xhtml:p><xhtml:p>		boolean[] result = subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">hasRoles</xhtml:span>(Arrays.asList("role1", "role2", "role3"));</xhtml:p><xhtml:p>		// 断言拥有角色：role1</xhtml:p><xhtml:p>		subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">checkRole</xhtml:span>("role1");</xhtml:p><xhtml:p>		// 断言拥有角色：role1 and role3 失败抛出异常</xhtml:p><xhtml:p>		subject().<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">checkRoles</xhtml:span>("role1", "role3");</xhtml:p></html><plain>
        //判断拥有权限：user:create
        Assert.assertTrue(subject().isPermitted("user:create"));
        //判断拥有权限：user:update and user:delete
        Assert.assertTrue(subject().isPermittedAll("user:update", "user:delete"));
        subject().checkPermission("user:create");
        subject().checkPermissions("user:update:1", "user:delete:1", "user:view:1");


		// 判断拥有角色：role1
		Assert.assertTrue(subject().hasRole("role1"));
		// 判断拥有角色：role1 and role2
		Assert.assertTrue(subject().hasAllRoles(Arrays.asList("role1", "role2")));
		// 判断拥有角色：role1 and role2 and !role3
		boolean[] result = subject().hasRoles(Arrays.asList("role1", "role2", "role3"));
		// 断言拥有角色：role1
		subject().checkRole("role1");
		// 断言拥有角色：role1 and role3 失败抛出异常
		subject().checkRoles("role1", "role3");</plain></notes></topic></topics></children></topic><topic id="614m29dmnnau37rptgd40v3fdm" timestamp="1393818131452"><title>3、加密、解密</title><children><topics type="attached"><topic id="74i1k8u2bmcudest85ogrp7vom" timestamp="1393817250422"><title>1、base64</title><notes><html><xhtml:p>org.apache.shiro.codec.Base64</xhtml:p><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testBase64() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        String base64Encoded = Base64.encodeToString(str.getBytes());</xhtml:p><xhtml:p>        System.out.println(base64Encoded);</xhtml:p><xhtml:p>        String str2 = Base64.decodeToString(base64Encoded);</xhtml:p><xhtml:p>        Assert.assertEquals(str, str2);</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>org.apache.shiro.codec.Base64
    @Test
    public void testBase64() {
        String str = "hello";
        String base64Encoded = Base64.encodeToString(str.getBytes());
        System.out.println(base64Encoded);
        String str2 = Base64.decodeToString(base64Encoded);
        Assert.assertEquals(str, str2);
    }</plain></notes></topic><topic id="70ecspds005noc27naghrbj0m3" timestamp="1393817457319"><title>2、hex</title><notes><html><xhtml:p>org.apache.shiro.codec.Hex</xhtml:p><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testHex() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        String hexEncoded = Hex.encodeToString(str.getBytes());</xhtml:p><xhtml:p>        System.out.println(hexEncoded);</xhtml:p><xhtml:p>        String str2 = new String(Hex.decode(hexEncoded.getBytes()));</xhtml:p><xhtml:p>        Assert.assertEquals(str, str2);</xhtml:p><xhtml:p>    }</xhtml:p><xhtml:p/></html><plain>org.apache.shiro.codec.Hex
    @Test
    public void testHex() {
        String str = "hello";
        String hexEncoded = Hex.encodeToString(str.getBytes());
        System.out.println(hexEncoded);
        String str2 = new String(Hex.decode(hexEncoded.getBytes()));
        Assert.assertEquals(str, str2);
    }
</plain></notes></topic><topic id="427nppaj7baogr7u8kkvkvjfgc" timestamp="1393817529071"><title>3、String编码解密</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testCodecSupport() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        byte[] bytes = CodecSupport.toBytes(str, "utf-8");// return String.getBytes(encoding);</xhtml:p><xhtml:p>        String str2 = CodecSupport.toString(bytes, "utf-8");// return new String(bytes, encoding);</xhtml:p><xhtml:p>        Assert.assertEquals(str, str2);</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testCodecSupport() {
        String str = "hello";
        byte[] bytes = CodecSupport.toBytes(str, "utf-8");// return String.getBytes(encoding);
        String str2 = CodecSupport.toString(bytes, "utf-8");// return new String(bytes, encoding);
        Assert.assertEquals(str, str2);
    }</plain></notes></topic><topic id="6ovc77rt09m6037jrjjqf3vhr0" timestamp="1393818251547"><title>5、非对称加密解密</title><children><topics type="attached"><topic id="16lh0um4j9apvj7t51firvgc55" timestamp="1393818171245"><title>1、AES</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testAesCipherService() {</xhtml:p><xhtml:p>        AesCipherService aesCipherService = new AesCipherService();</xhtml:p><xhtml:p>        aesCipherService.setKeySize(128);//设置key长度</xhtml:p><xhtml:p/><xhtml:p>        //生成key</xhtml:p><xhtml:p>        Key key = aesCipherService.generateNewKey();</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p/><xhtml:p>        String text = "hello";</xhtml:p><xhtml:p/><xhtml:p>        //加密</xhtml:p><xhtml:p>        String encrptText = aesCipherService.encrypt(text.getBytes(), key.getEncoded()).toHex();</xhtml:p><xhtml:p>        System.out.println(encrptText);</xhtml:p><xhtml:p>        //解密</xhtml:p><xhtml:p>        String text2 = new String(aesCipherService.decrypt(Hex.decode(encrptText), key.getEncoded()).getBytes());</xhtml:p><xhtml:p/><xhtml:p>        Assert.assertEquals(text, text2);</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testAesCipherService() {
        AesCipherService aesCipherService = new AesCipherService();
        aesCipherService.setKeySize(128);//设置key长度

        //生成key
        Key key = aesCipherService.generateNewKey();
        System.out.println(key.getEncoded());
        System.out.println(key.getEncoded());
        System.out.println(key.getEncoded());

        String text = "hello";

        //加密
        String encrptText = aesCipherService.encrypt(text.getBytes(), key.getEncoded()).toHex();
        System.out.println(encrptText);
        //解密
        String text2 = new String(aesCipherService.decrypt(Hex.decode(encrptText), key.getEncoded()).getBytes());

        Assert.assertEquals(text, text2);
    }</plain></notes></topic><topic id="54jcrepafcu8b0b0gp85tr3qj2" timestamp="1393818205805"><title>2、Blowfish</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testBlowfishCipherService() {</xhtml:p><xhtml:p>        BlowfishCipherService blowfishCipherService = new BlowfishCipherService();</xhtml:p><xhtml:p>        blowfishCipherService.setKeySize(128);</xhtml:p><xhtml:p/><xhtml:p>        //生成key</xhtml:p><xhtml:p>        Key key = blowfishCipherService.generateNewKey();</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p/><xhtml:p>        String text = "hello";</xhtml:p><xhtml:p>        </xhtml:p><xhtml:p>        //加密</xhtml:p><xhtml:p>        String encrptText = blowfishCipherService.encrypt(text.getBytes(), key.getEncoded()).toHex();</xhtml:p><xhtml:p>        System.out.println(encrptText);</xhtml:p><xhtml:p>        //解密</xhtml:p><xhtml:p>        String text2 = new String(blowfishCipherService.decrypt(Hex.decode(encrptText), key.getEncoded()).getBytes());</xhtml:p><xhtml:p/><xhtml:p>        Assert.assertEquals(text, text2);</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testBlowfishCipherService() {
        BlowfishCipherService blowfishCipherService = new BlowfishCipherService();
        blowfishCipherService.setKeySize(128);

        //生成key
        Key key = blowfishCipherService.generateNewKey();
        System.out.println(key.getEncoded());
        System.out.println(key.getEncoded());
        System.out.println(key.getEncoded());

        String text = "hello";
        
        //加密
        String encrptText = blowfishCipherService.encrypt(text.getBytes(), key.getEncoded()).toHex();
        System.out.println(encrptText);
        //解密
        String text2 = new String(blowfishCipherService.decrypt(Hex.decode(encrptText), key.getEncoded()).getBytes());

        Assert.assertEquals(text, text2);
    }</plain></notes></topic><topic id="0rvv1jgc7ufahm96pmemenbe81" timestamp="1393818262865"><title>3、DefaultBlock</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testDefaultBlockCipherService() throws Exception {</xhtml:p><xhtml:p>        //对称加密，使用Java的JCA（javax.crypto.Cipher）加密API，常见的如 'AES', 'Blowfish'</xhtml:p><xhtml:p>        DefaultBlockCipherService cipherService = new DefaultBlockCipherService("AES");</xhtml:p><xhtml:p>        cipherService.setKeySize(128);</xhtml:p><xhtml:p/><xhtml:p>        //生成key</xhtml:p><xhtml:p>        Key key = cipherService.generateNewKey();</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p>        System.out.println(key.getEncoded());</xhtml:p><xhtml:p/><xhtml:p>        String text = "hello";</xhtml:p><xhtml:p>        //加密</xhtml:p><xhtml:p>        String encrptText = cipherService.encrypt(text.getBytes(), key.getEncoded()).toHex();</xhtml:p><xhtml:p>        System.out.println(encrptText);</xhtml:p><xhtml:p>        //解密</xhtml:p><xhtml:p>        String text2 = new String(cipherService.decrypt(Hex.decode(encrptText), key.getEncoded()).getBytes());</xhtml:p><xhtml:p/><xhtml:p>        Assert.assertEquals(text, text2);</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testDefaultBlockCipherService() throws Exception {
        //对称加密，使用Java的JCA（javax.crypto.Cipher）加密API，常见的如 'AES', 'Blowfish'
        DefaultBlockCipherService cipherService = new DefaultBlockCipherService("AES");
        cipherService.setKeySize(128);

        //生成key
        Key key = cipherService.generateNewKey();
        System.out.println(key.getEncoded());
        System.out.println(key.getEncoded());
        System.out.println(key.getEncoded());

        String text = "hello";
        //加密
        String encrptText = cipherService.encrypt(text.getBytes(), key.getEncoded()).toHex();
        System.out.println(encrptText);
        //解密
        String text2 = new String(cipherService.decrypt(Hex.decode(encrptText), key.getEncoded()).getBytes());

        Assert.assertEquals(text, text2);
    }</plain></notes></topic></topics></children></topic><topic id="3ba2efevare7o4p7tme7jcgubu" timestamp="1393817971232"><title>4、加密</title><children><topics type="attached"><topic id="389l14pfv2n8v7jde8jorl1hnq" timestamp="1393817653632"><title>1、md5</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testMd5() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        String salt = "123";</xhtml:p><xhtml:p>        Md5Hash md5Hash = new Md5Hash(str, salt);</xhtml:p><xhtml:p>		String md5 = md5Hash.toString();//还可以转换为 toBase64()/toHex()</xhtml:p><xhtml:p>        System.out.println(md5);</xhtml:p><xhtml:p>        System.out.println(md5Hash.toHex());</xhtml:p><xhtml:p>        System.out.println(md5Hash.toBase64());</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testMd5() {
        String str = "hello";
        String salt = "123";
        Md5Hash md5Hash = new Md5Hash(str, salt);
		String md5 = md5Hash.toString();//还可以转换为 toBase64()/toHex()
        System.out.println(md5);
        System.out.println(md5Hash.toHex());
        System.out.println(md5Hash.toBase64());
    }</plain></notes></topic><topic id="7gssj8p0b35cq2giu84gr3t73d" timestamp="1393817794594"><title>2、sha</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testSha1() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        String salt = "123";</xhtml:p><xhtml:p>        String sha1 = new Sha1Hash(str, salt).toString();</xhtml:p><xhtml:p>        System.out.println(sha1);</xhtml:p><xhtml:p>        //f0a139408f7b134c66342e3d1cf4870a293c11c3</xhtml:p><xhtml:p>    }</xhtml:p><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testSha256() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        String salt = "123";</xhtml:p><xhtml:p>        String sha1 = new Sha256Hash(str, salt).toString();</xhtml:p><xhtml:p>        System.out.println(sha1);</xhtml:p><xhtml:p>        //7dfe54ea69b2d07a597952e49374a1aebf3c10689444a83f0a084761c8a1c626</xhtml:p><xhtml:p>    }</xhtml:p><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testSha384() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        String salt = "123";</xhtml:p><xhtml:p>        String sha1 = new Sha384Hash(str, salt).toString();</xhtml:p><xhtml:p>        System.out.println(sha1);</xhtml:p><xhtml:p>        //b18fad48be86ede658ae8b850137757d630772726f7ed70c2439cf42d536d9d20c0f377b546c49639586217b72c41077</xhtml:p><xhtml:p>    }</xhtml:p><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testSha512() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        String salt = "123";</xhtml:p><xhtml:p>        String sha1 = new Sha512Hash(str, salt).toString();</xhtml:p><xhtml:p>        System.out.println(sha1);</xhtml:p><xhtml:p>        //8150172b303ad08d821c81576c2f2e0948230a7cb250e273ecce88051982cc6fc01824f468c774c7c57d20548585ccc9e1e25f6b01c6a56e9a07dd64bb745465</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testSha1() {
        String str = "hello";
        String salt = "123";
        String sha1 = new Sha1Hash(str, salt).toString();
        System.out.println(sha1);
        //f0a139408f7b134c66342e3d1cf4870a293c11c3
    }

    @Test
    public void testSha256() {
        String str = "hello";
        String salt = "123";
        String sha1 = new Sha256Hash(str, salt).toString();
        System.out.println(sha1);
        //7dfe54ea69b2d07a597952e49374a1aebf3c10689444a83f0a084761c8a1c626
    }

    @Test
    public void testSha384() {
        String str = "hello";
        String salt = "123";
        String sha1 = new Sha384Hash(str, salt).toString();
        System.out.println(sha1);
        //b18fad48be86ede658ae8b850137757d630772726f7ed70c2439cf42d536d9d20c0f377b546c49639586217b72c41077
    }

    @Test
    public void testSha512() {
        String str = "hello";
        String salt = "123";
        String sha1 = new Sha512Hash(str, salt).toString();
        System.out.println(sha1);
        //8150172b303ad08d821c81576c2f2e0948230a7cb250e273ecce88051982cc6fc01824f468c774c7c57d20548585ccc9e1e25f6b01c6a56e9a07dd64bb745465
    }</plain></notes></topic><topic id="48di18vpt3tdj13k5177l0ttid" timestamp="1393817917341"><title>3、SimpleHash</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testSimpleHash() {</xhtml:p><xhtml:p>        String str = "hello";</xhtml:p><xhtml:p>        String salt = "123";</xhtml:p><xhtml:p>        //MessageDigest</xhtml:p><xhtml:p>        String simpleHash = new SimpleHash("SHA-1", str, salt).toString();</xhtml:p><xhtml:p>        System.out.println(simpleHash);</xhtml:p><xhtml:p>        //f0a139408f7b134c66342e3d1cf4870a293c11c3</xhtml:p><xhtml:p>        //f0a139408f7b134c66342e3d1cf4870a293c11c3</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testSimpleHash() {
        String str = "hello";
        String salt = "123";
        //MessageDigest
        String simpleHash = new SimpleHash("SHA-1", str, salt).toString();
        System.out.println(simpleHash);
        //f0a139408f7b134c66342e3d1cf4870a293c11c3
        //f0a139408f7b134c66342e3d1cf4870a293c11c3
    }</plain></notes></topic><topic id="0785bp8qhcnie0mg8gg82gt002" timestamp="1393817979790"><title>4、DefaultHashService</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testHashService() {</xhtml:p><xhtml:p>        DefaultHashService hashService = new DefaultHashService(); //默认算法SHA-512</xhtml:p><xhtml:p>        hashService.setHashAlgorithmName("SHA-512");</xhtml:p><xhtml:p>        hashService.setPrivateSalt(new SimpleByteSource("123")); //私盐，默认无</xhtml:p><xhtml:p>        hashService.setGeneratePublicSalt(true);//是否生成公盐，默认false</xhtml:p><xhtml:p>        hashService.setRandomNumberGenerator(new SecureRandomNumberGenerator());//用于生成公盐。默认就这个</xhtml:p><xhtml:p>        hashService.setHashIterations(1); //生成Hash值的迭代次数</xhtml:p><xhtml:p/><xhtml:p>        HashRequest request = new HashRequest.Builder()</xhtml:p><xhtml:p>                .setAlgorithmName("MD5").setSource(ByteSource.Util.bytes("hello"))</xhtml:p><xhtml:p>                .setSalt(ByteSource.Util.bytes("123")).setIterations(2).build();</xhtml:p><xhtml:p>        String hex = hashService.computeHash(request).toHex();</xhtml:p><xhtml:p>        System.out.println(hex);</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testHashService() {
        DefaultHashService hashService = new DefaultHashService(); //默认算法SHA-512
        hashService.setHashAlgorithmName("SHA-512");
        hashService.setPrivateSalt(new SimpleByteSource("123")); //私盐，默认无
        hashService.setGeneratePublicSalt(true);//是否生成公盐，默认false
        hashService.setRandomNumberGenerator(new SecureRandomNumberGenerator());//用于生成公盐。默认就这个
        hashService.setHashIterations(1); //生成Hash值的迭代次数

        HashRequest request = new HashRequest.Builder()
                .setAlgorithmName("MD5").setSource(ByteSource.Util.bytes("hello"))
                .setSalt(ByteSource.Util.bytes("123")).setIterations(2).build();
        String hex = hashService.computeHash(request).toHex();
        System.out.println(hex);
    }</plain></notes></topic></topics></children></topic><topic id="2ujdrsemuebvg36cae90q1b4a9" timestamp="1393817670761"><title>其他</title><children><topics type="attached"><topic id="0sf315fvlfevqlijlhdf1a3amu" timestamp="1393817669236"><title>1、生成随机数</title><notes><html><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>    public void testRandom() {</xhtml:p><xhtml:p>        //生成随机数</xhtml:p><xhtml:p>        SecureRandomNumberGenerator randomNumberGenerator = new SecureRandomNumberGenerator();</xhtml:p><xhtml:p>        randomNumberGenerator.setSeed("123".getBytes());</xhtml:p><xhtml:p>        System.out.println(randomNumberGenerator.nextBytes().toHex());</xhtml:p><xhtml:p>    }</xhtml:p></html><plain>
    @Test
    public void testRandom() {
        //生成随机数
        SecureRandomNumberGenerator randomNumberGenerator = new SecureRandomNumberGenerator();
        randomNumberGenerator.setSeed("123".getBytes());
        System.out.println(randomNumberGenerator.nextBytes().toHex());
    }</plain></notes></topic></topics></children></topic></topics></children></topic></topics></children></topic><title>画布 1</title></sheet></xmap-revision-content>