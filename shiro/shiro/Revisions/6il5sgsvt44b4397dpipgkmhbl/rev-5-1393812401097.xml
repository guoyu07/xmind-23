<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="6il5sgsvt44b4397dpipgkmhbl" timestamp="1393812314269" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="6crke48nk7btn8hfvn2coajn5n" structure-class="org.xmind.ui.map.clockwise" timestamp="1393811026373"><title>SHIRO</title><children><topics type="attached"><topic id="7m0h3f37nhu7pf6n6qocp1jjvd" timestamp="1393811898481"><title>1、身份验证</title><notes><html><xhtml:p>1、根据ini配置文件初始化SecurityMangerFactory</xhtml:p><xhtml:p>		Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = new IniSecurityManagerFactory(configFile);</xhtml:p><xhtml:p/><xhtml:p>2、获得SecurityManager示例，并绑定到SecurityUtils</xhtml:p><xhtml:p>        org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();</xhtml:p><xhtml:p>        SecurityUtils.setSecurityManager(securityManager);</xhtml:p><xhtml:p/><xhtml:p>3、得到subject，以及创建用户名/密码身份验证Token（即用户身份/凭证）</xhtml:p><xhtml:p>		Subject subject = SecurityUtils.getSubject();</xhtml:p><xhtml:p>        UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");</xhtml:p><xhtml:p/><xhtml:p>4、进行登录</xhtml:p><xhtml:p>        subject.login(token);</xhtml:p><xhtml:p/><xhtml:p>5、登录成功</xhtml:p><xhtml:p>		Assert.assertEquals(true, subject.isAuthenticated()); //断言用户已经登录</xhtml:p><xhtml:p/><xhtml:p>6、退出</xhtml:p><xhtml:p>		subject.logout();</xhtml:p><xhtml:p/></html><plain>1、根据ini配置文件初始化SecurityMangerFactory
		Factory&lt;org.apache.shiro.mgt.SecurityManager&gt; factory = new IniSecurityManagerFactory(configFile);

2、获得SecurityManager示例，并绑定到SecurityUtils
        org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();
        SecurityUtils.setSecurityManager(securityManager);

3、得到subject，以及创建用户名/密码身份验证Token（即用户身份/凭证）
		Subject subject = SecurityUtils.getSubject();
        UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");

4、进行登录
        subject.login(token);

5、登录成功
		Assert.assertEquals(true, subject.isAuthenticated()); //断言用户已经登录

6、退出
		subject.logout();
</plain></notes><children><topics type="attached"><topic id="74t11om6evhhgkhnfmkslpda8h" timestamp="1393811896184"><title>1、ini配置文件</title><children><topics type="attached"><topic id="7baoj5vtt5ebcjf1006s3dcmk4" timestamp="1393811740620"><title>1、配置用户身份/凭证</title><notes><html><xhtml:p>#配置用户身份、凭证</xhtml:p><xhtml:p>[users]</xhtml:p><xhtml:p>zhang=123</xhtml:p><xhtml:p>wang=123</xhtml:p><xhtml:p/><xhtml:p/></html><plain>#配置用户身份、凭证
[users]
zhang=123
wang=123

</plain></notes></topic><topic id="7l5t2c4e2bckrop80bl50koqi5" timestamp="1393811728567"><title>2、配置realm</title><notes><html><xhtml:p>[main]</xhtml:p><xhtml:p>dataSource=com.alibaba.druid.pool.DruidDataSource</xhtml:p><xhtml:p>dataSource.driverClassName=com.mysql.jdbc.Driver</xhtml:p><xhtml:p>dataSource.url=jdbc:mysql://localhost:3306/shiro</xhtml:p><xhtml:p>dataSource.username=root</xhtml:p><xhtml:p>dataSource.password=111111</xhtml:p><xhtml:p/><xhtml:p>jdbcRealm=<xhtml:span style-id="0odg3cah6mahdi4nd6oalobrgm">org.apache.shiro.realm.jdbc.JdbcRealm</xhtml:span></xhtml:p><xhtml:p>jdbcRealm.dataSource=$dataSource</xhtml:p><xhtml:p/><xhtml:p>myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2</xhtml:p><xhtml:p/><xhtml:p>#指定securityManager的realms实现</xhtml:p><xhtml:p>securityManager.realms=$jdbcRealm,$myRealm2</xhtml:p></html><plain>[main]
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=root
dataSource.password=111111

jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource

myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2

#指定securityManager的realms实现
securityManager.realms=$jdbcRealm,$myRealm2</plain></notes></topic></topics></children></topic><topic id="5ig9b36o6rg0p6r070nf46s6s5" timestamp="1393812311640"><title>2、验证器authenticator及验证策略</title><children><topics type="attached"><topic id="7l4m8eejreo0ap5ck1kkk5cgml" timestamp="1393812308012"><title>1、验证器</title><notes><html><xhtml:p>验证器（org.apache.shiro.authc.pam.ModularRealmAuthenticator）如果只有多个realm，则需要验证策略</xhtml:p><xhtml:p/><xhtml:p>默认的验证策略是至少一个验证通过：</xhtml:p><xhtml:p>	public ModularRealmAuthenticator() {</xhtml:p><xhtml:p>        this.authenticationStrategy = new AtLeastOneSuccessfulStrategy();</xhtml:p><xhtml:p>    }</xhtml:p><xhtml:p/><xhtml:p>自定义的验证策略，需要实现接口org.apache.shiro.authc.pam.AuthenticationStrategy</xhtml:p><xhtml:p/></html><plain>验证器（org.apache.shiro.authc.pam.ModularRealmAuthenticator）如果只有多个realm，则需要验证策略

默认的验证策略是至少一个验证通过：
	public ModularRealmAuthenticator() {
        this.authenticationStrategy = new AtLeastOneSuccessfulStrategy();
    }

自定义的验证策略，需要实现接口org.apache.shiro.authc.pam.AuthenticationStrategy
</plain></notes></topic><topic id="02vksapsc5tdb3hoh0dkhg741o" timestamp="1393812314269"><title>2、</title></topic></topics></children></topic><topic id="5b8hse4et69bsh0mvebg24v0sn" timestamp="1393811898458"><title>子主题 3</title></topic></topics></children></topic></topics></children></topic><title>画布 1</title></sheet></xmap-revision-content>