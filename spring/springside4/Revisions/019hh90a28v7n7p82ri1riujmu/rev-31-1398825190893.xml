<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="019hh90a28v7n7p82ri1riujmu" timestamp="1398825093016" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="18tcgce1u7spj9t6v7bhr4sodc" structure-class="org.xmind.ui.map.clockwise" timestamp="1398822328301"><title>springside4</title><children><topics type="attached"><topic id="4rj5sjfq18rg59hjv0m5rmj8hc" timestamp="1398660536420"><title>maven</title><children><topics type="attached"><topic id="1sq0ctcgsjqpdmms538s4djbap" timestamp="1398661315803"><title>profiles</title><notes><html><xhtml:p><xhtml:span style-id="6hco9tv09oil6o32ck82h1lo90">pom.xml能够定义的profiles包括：</xhtml:span></xhtml:p><xhtml:p>	&lt;repositories&gt;</xhtml:p><xhtml:p>	&lt;pluginRepositories&gt;</xhtml:p><xhtml:p>	&lt;dependencies&gt;</xhtml:p><xhtml:p>	&lt;plugins&gt;</xhtml:p><xhtml:p>	&lt;properties&gt; (not actually available in the main POM, but used behind the scenes)</xhtml:p><xhtml:p>	&lt;modules&gt;</xhtml:p><xhtml:p>	&lt;reporting&gt;</xhtml:p><xhtml:p>	&lt;dependencyManagement&gt;</xhtml:p><xhtml:p>	&lt;distributionManagement&gt;</xhtml:p><xhtml:p>	a subset of the &lt;build&gt; element, which consists of:</xhtml:p><xhtml:p>		&lt;defaultGoal&gt;</xhtml:p><xhtml:p>		&lt;resources&gt;</xhtml:p><xhtml:p>		&lt;testResources&gt;</xhtml:p><xhtml:p>		&lt;finalName&gt;</xhtml:p><xhtml:p/><xhtml:p><xhtml:span style-id="6hco9tv09oil6o32ck82h1lo90">激活Profiles</xhtml:span></xhtml:p><xhtml:p>1）通过mvn命令的-P参数来显示激活profiles，该参数值是profile id list（之间用逗号连接）。如：</xhtml:p><xhtml:p>		mvn groupId:artifactId:goal -P profileId-1,profileId-2</xhtml:p><xhtml:p>3）Profiles还可以基于detect到的build environment 的state来自动激活，而不需要象上面2种方式显式激活。这只需要在profile定义时使用&lt;activation&gt; element。如：</xhtml:p><xhtml:p>	&lt;profiles&gt;</xhtml:p><xhtml:p>	 &lt;profile&gt;</xhtml:p><xhtml:p>	    &lt;activation&gt;</xhtml:p><xhtml:p>	      &lt;jdk&gt;1.4&lt;/jdk&gt;</xhtml:p><xhtml:p>	    &lt;/activation&gt;</xhtml:p><xhtml:p>	    ...</xhtml:p><xhtml:p>	 &lt;/profile&gt;</xhtml:p><xhtml:p>	&lt;/profiles&gt;</xhtml:p><xhtml:p><xhtml:span style-id="6hco9tv09oil6o32ck82h1lo90">	</xhtml:span><xhtml:span style-id="6hco9tv09oil6o32ck82h1lo90">mvn groupId:artifactId:goal –Ddebug</xhtml:span></xhtml:p><xhtml:p>	&lt;profiles&gt;</xhtml:p><xhtml:p>	 &lt;profile&gt;</xhtml:p><xhtml:p>	    &lt;activation&gt;</xhtml:p><xhtml:p>	      &lt;property&gt;</xhtml:p><xhtml:p>	        &lt;name&gt;debug&lt;/name&gt;</xhtml:p><xhtml:p>	      &lt;/property&gt;</xhtml:p><xhtml:p>	    &lt;/activation&gt;</xhtml:p><xhtml:p>	    ...</xhtml:p><xhtml:p>	 &lt;/profile&gt;</xhtml:p><xhtml:p>	&lt;/profiles&gt;</xhtml:p><xhtml:p><xhtml:span style-id="6hco9tv09oil6o32ck82h1lo90">	mvn groupId:artifactId:goal -Denvironment=test</xhtml:span></xhtml:p><xhtml:p>	&lt;profiles&gt;</xhtml:p><xhtml:p>	 &lt;profile&gt;</xhtml:p><xhtml:p>	    &lt;activation&gt;</xhtml:p><xhtml:p>	      &lt;property&gt;</xhtml:p><xhtml:p>	        &lt;name&gt;environment&lt;/name&gt;</xhtml:p><xhtml:p>	        &lt;value&gt;test&lt;/value&gt;</xhtml:p><xhtml:p>	      &lt;/property&gt;</xhtml:p><xhtml:p>	    &lt;/activation&gt;</xhtml:p><xhtml:p>	    ...</xhtml:p><xhtml:p>	 &lt;/profile&gt;</xhtml:p><xhtml:p>	&lt;/profiles&gt;</xhtml:p><xhtml:p/></html><plain>pom.xml能够定义的profiles包括：&#13;
	&lt;repositories&gt;&#13;
	&lt;pluginRepositories&gt;&#13;
	&lt;dependencies&gt;&#13;
	&lt;plugins&gt;&#13;
	&lt;properties&gt; (not actually available in the main POM, but used behind the scenes)&#13;
	&lt;modules&gt;&#13;
	&lt;reporting&gt;&#13;
	&lt;dependencyManagement&gt;&#13;
	&lt;distributionManagement&gt;&#13;
	a subset of the &lt;build&gt; element, which consists of:&#13;
		&lt;defaultGoal&gt;&#13;
		&lt;resources&gt;&#13;
		&lt;testResources&gt;&#13;
		&lt;finalName&gt;&#13;
&#13;
激活Profiles&#13;
1）通过mvn命令的-P参数来显示激活profiles，该参数值是profile id list（之间用逗号连接）。如：&#13;
		mvn groupId:artifactId:goal -P profileId-1,profileId-2&#13;
3）Profiles还可以基于detect到的build environment 的state来自动激活，而不需要象上面2种方式显式激活。这只需要在profile定义时使用&lt;activation&gt; element。如：&#13;
	&lt;profiles&gt;&#13;
	 &lt;profile&gt;&#13;
	    &lt;activation&gt;&#13;
	      &lt;jdk&gt;1.4&lt;/jdk&gt;&#13;
	    &lt;/activation&gt;&#13;
	    ...&#13;
	 &lt;/profile&gt;&#13;
	&lt;/profiles&gt;&#13;
	mvn groupId:artifactId:goal –Ddebug&#13;
	&lt;profiles&gt;&#13;
	 &lt;profile&gt;&#13;
	    &lt;activation&gt;&#13;
	      &lt;property&gt;&#13;
	        &lt;name&gt;debug&lt;/name&gt;&#13;
	      &lt;/property&gt;&#13;
	    &lt;/activation&gt;&#13;
	    ...&#13;
	 &lt;/profile&gt;&#13;
	&lt;/profiles&gt;&#13;
	mvn groupId:artifactId:goal -Denvironment=test&#13;
	&lt;profiles&gt;&#13;
	 &lt;profile&gt;&#13;
	    &lt;activation&gt;&#13;
	      &lt;property&gt;&#13;
	        &lt;name&gt;environment&lt;/name&gt;&#13;
	        &lt;value&gt;test&lt;/value&gt;&#13;
	      &lt;/property&gt;&#13;
	    &lt;/activation&gt;&#13;
	    ...&#13;
	 &lt;/profile&gt;&#13;
	&lt;/profiles&gt;&#13;
</plain></notes></topic><topic id="22pkf3j84nbufqmaqemhv6cgq7" timestamp="1398740554498"><title>maven插件</title><children><topics type="attached"><topic id="7euf2vc5v8lghsjkad5b333jg2" timestamp="1398661365181"><title>maven-antrun-plugin</title><notes><html><xhtml:p/><xhtml:p>					&lt;plugin&gt;</xhtml:p><xhtml:p>						&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</xhtml:p><xhtml:p>						&lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>						&lt;configuration&gt;</xhtml:p><xhtml:p>							<xhtml:span style-id="4hf5emat9fs18l6crukki5o612">&lt;target&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">								&lt;property file="src/main/resources/application.development.properties" /&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">								&lt;property file="src/main/resources/application.properties" /&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">								&lt;sql driver="${jdbc.driver}" url="${jdbc.url}" userid="${jdbc.username}" password="${jdbc.password}"</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">									onerror="continue" encoding="${project.build.sourceEncoding}"&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">									&lt;classpath refid="maven.test.classpath" /&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">									&lt;transaction src="src/main/resources/sql/h2/schema.sql" /&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">									&lt;transaction src="src/test/resources/data/h2/import-data.sql" /&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">								&lt;/sql&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">							&lt;/target&gt;</xhtml:span></xhtml:p><xhtml:p>						&lt;/configuration&gt;</xhtml:p><xhtml:p>					&lt;/plugin&gt;</xhtml:p></html><plain>&#13;
					&lt;plugin&gt;&#13;
						&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#13;
						&lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;&#13;
						&lt;configuration&gt;&#13;
							&lt;target&gt;&#13;
								&lt;property file="src/main/resources/application.development.properties" /&gt;&#13;
								&lt;property file="src/main/resources/application.properties" /&gt;&#13;
								&lt;sql driver="${jdbc.driver}" url="${jdbc.url}" userid="${jdbc.username}" password="${jdbc.password}"&#13;
									onerror="continue" encoding="${project.build.sourceEncoding}"&gt;&#13;
									&lt;classpath refid="maven.test.classpath" /&gt;&#13;
									&lt;transaction src="src/main/resources/sql/h2/schema.sql" /&gt;&#13;
									&lt;transaction src="src/test/resources/data/h2/import-data.sql" /&gt;&#13;
								&lt;/sql&gt;&#13;
							&lt;/target&gt;&#13;
						&lt;/configuration&gt;&#13;
					&lt;/plugin&gt;</plain></notes></topic><topic id="2c9re7sk4hoc9gc9nk0hthvtt0" timestamp="1398676290232"><title>jetty插件</title><notes><html><xhtml:p>    &lt;properties&gt;</xhtml:p><xhtml:p>        &lt;jetty.version&gt;8.1.9.v20130131&lt;/jetty.version&gt;</xhtml:p><xhtml:p>    &lt;/properties&gt;</xhtml:p><xhtml:p/><xhtml:p>    &lt;!-- jetty --&gt;</xhtml:p><xhtml:p>    &lt;dependency&gt;</xhtml:p><xhtml:p>        &lt;groupId&gt;org.eclipse.jetty.aggregate&lt;/groupId&gt;</xhtml:p><xhtml:p>        &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt;</xhtml:p><xhtml:p>        &lt;version&gt;${jetty.version}&lt;/version&gt;</xhtml:p><xhtml:p>        &lt;scope&gt;test&lt;/scope&gt;</xhtml:p><xhtml:p>    &lt;/dependency&gt;</xhtml:p><xhtml:p>    &lt;dependency&gt;</xhtml:p><xhtml:p>        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</xhtml:p><xhtml:p>        &lt;artifactId&gt;jetty-jsp&lt;/artifactId&gt;</xhtml:p><xhtml:p>        &lt;version&gt;${jetty.version}&lt;/version&gt;</xhtml:p><xhtml:p>        &lt;scope&gt;test&lt;/scope&gt;</xhtml:p><xhtml:p>    &lt;/dependency&gt;</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>    &lt;plugin&gt;</xhtml:p><xhtml:p>        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;</xhtml:p><xhtml:p>        &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>        &lt;version&gt;${jetty.version}&lt;/version&gt;</xhtml:p><xhtml:p>        &lt;configuration&gt;</xhtml:p><xhtml:p>            &lt;systemProperties&gt;</xhtml:p><xhtml:p>                &lt;systemProperty&gt;</xhtml:p><xhtml:p>                    &lt;name&gt;spring.profiles.active&lt;/name&gt;</xhtml:p><xhtml:p>                    &lt;value&gt;development&lt;/value&gt;</xhtml:p><xhtml:p>                &lt;/systemProperty&gt;</xhtml:p><xhtml:p>            &lt;/systemProperties&gt;</xhtml:p><xhtml:p>            &lt;useTestClasspath&gt;true&lt;/useTestClasspath&gt;</xhtml:p><xhtml:p>    </xhtml:p><xhtml:p>            &lt;webAppConfig&gt;</xhtml:p><xhtml:p>                &lt;contextPath&gt;/${project.artifactId}&lt;/contextPath&gt;</xhtml:p><xhtml:p>            &lt;/webAppConfig&gt;</xhtml:p><xhtml:p>        &lt;/configuration&gt;</xhtml:p><xhtml:p>    &lt;/plugin&gt;</xhtml:p></html><plain>    &lt;properties&gt;&#13;
        &lt;jetty.version&gt;8.1.9.v20130131&lt;/jetty.version&gt;&#13;
    &lt;/properties&gt;&#13;
&#13;
    &lt;!-- jetty --&gt;&#13;
    &lt;dependency&gt;&#13;
        &lt;groupId&gt;org.eclipse.jetty.aggregate&lt;/groupId&gt;&#13;
        &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt;&#13;
        &lt;version&gt;${jetty.version}&lt;/version&gt;&#13;
        &lt;scope&gt;test&lt;/scope&gt;&#13;
    &lt;/dependency&gt;&#13;
    &lt;dependency&gt;&#13;
        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;&#13;
        &lt;artifactId&gt;jetty-jsp&lt;/artifactId&gt;&#13;
        &lt;version&gt;${jetty.version}&lt;/version&gt;&#13;
        &lt;scope&gt;test&lt;/scope&gt;&#13;
    &lt;/dependency&gt;&#13;
&#13;
&#13;
    &lt;plugin&gt;&#13;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;&#13;
        &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;&#13;
        &lt;version&gt;${jetty.version}&lt;/version&gt;&#13;
        &lt;configuration&gt;&#13;
            &lt;systemProperties&gt;&#13;
                &lt;systemProperty&gt;&#13;
                    &lt;name&gt;spring.profiles.active&lt;/name&gt;&#13;
                    &lt;value&gt;development&lt;/value&gt;&#13;
                &lt;/systemProperty&gt;&#13;
            &lt;/systemProperties&gt;&#13;
            &lt;useTestClasspath&gt;true&lt;/useTestClasspath&gt;&#13;
    &#13;
            &lt;webAppConfig&gt;&#13;
                &lt;contextPath&gt;/${project.artifactId}&lt;/contextPath&gt;&#13;
            &lt;/webAppConfig&gt;&#13;
        &lt;/configuration&gt;&#13;
    &lt;/plugin&gt;</plain></notes></topic><topic id="77rmfcfrrmde7dt5v8roan2624" timestamp="1398736346079"><title>compiler插件</title><notes><html><xhtml:p/><xhtml:p>			&lt;!-- compiler插件, 设定JDK版本 --&gt;</xhtml:p><xhtml:p>			&lt;plugin&gt;</xhtml:p><xhtml:p>				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</xhtml:p><xhtml:p>				&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;version&gt;3.1&lt;/version&gt;</xhtml:p><xhtml:p>				&lt;configuration&gt;</xhtml:p><xhtml:p>					&lt;source&gt;${java.version}&lt;/source&gt;</xhtml:p><xhtml:p>					&lt;target&gt;${java.version}&lt;/target&gt;</xhtml:p><xhtml:p>					&lt;showWarnings&gt;true&lt;/showWarnings&gt;</xhtml:p><xhtml:p>				&lt;/configuration&gt;</xhtml:p><xhtml:p>			&lt;/plugin&gt;</xhtml:p></html><plain>&#13;
			&lt;!-- compiler插件, 设定JDK版本 --&gt;&#13;
			&lt;plugin&gt;&#13;
				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#13;
				&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#13;
				&lt;version&gt;3.1&lt;/version&gt;&#13;
				&lt;configuration&gt;&#13;
					&lt;source&gt;${java.version}&lt;/source&gt;&#13;
					&lt;target&gt;${java.version}&lt;/target&gt;&#13;
					&lt;showWarnings&gt;true&lt;/showWarnings&gt;&#13;
				&lt;/configuration&gt;&#13;
			&lt;/plugin&gt;</plain></notes></topic><topic id="1pi3rm8rqv5kviqfaqsllbjn6c" timestamp="1398736383441"><title>war插件</title><notes><html><xhtml:p/><xhtml:p>			&lt;!-- war打包插件, 设定war包名称不带版本号 --&gt;</xhtml:p><xhtml:p>			&lt;plugin&gt;</xhtml:p><xhtml:p>				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</xhtml:p><xhtml:p>				&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;version&gt;2.4&lt;/version&gt;</xhtml:p><xhtml:p>				&lt;configuration&gt;</xhtml:p><xhtml:p>					&lt;warName&gt;${project.artifactId}&lt;/warName&gt;</xhtml:p><xhtml:p>				&lt;/configuration&gt;</xhtml:p><xhtml:p>			&lt;/plugin&gt;</xhtml:p></html><plain>&#13;
			&lt;!-- war打包插件, 设定war包名称不带版本号 --&gt;&#13;
			&lt;plugin&gt;&#13;
				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#13;
				&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;&#13;
				&lt;version&gt;2.4&lt;/version&gt;&#13;
				&lt;configuration&gt;&#13;
					&lt;warName&gt;${project.artifactId}&lt;/warName&gt;&#13;
				&lt;/configuration&gt;&#13;
			&lt;/plugin&gt;</plain></notes></topic><topic id="4nbkj8il1vtv29fj39spdkr5hg" timestamp="1398737139690"><title>test插件</title><notes><html><xhtml:p/><xhtml:p>			&lt;!-- test插件, 仅测试名称为*Test的类,使用支持分组测试的surefire-junit47 driver --&gt;</xhtml:p><xhtml:p>			&lt;plugin&gt;</xhtml:p><xhtml:p>				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</xhtml:p><xhtml:p>				&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;version&gt;2.16&lt;/version&gt;</xhtml:p><xhtml:p>				&lt;configuration&gt;</xhtml:p><xhtml:p>					&lt;includes&gt;</xhtml:p><xhtml:p>						&lt;include&gt;**/*Test.java&lt;/include&gt;</xhtml:p><xhtml:p>					&lt;/includes&gt;</xhtml:p><xhtml:p>					&lt;argLine&gt;-Xmx256M&lt;/argLine&gt;</xhtml:p><xhtml:p>				&lt;/configuration&gt;</xhtml:p><xhtml:p>				&lt;dependencies&gt;</xhtml:p><xhtml:p>					&lt;dependency&gt;</xhtml:p><xhtml:p>						&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;</xhtml:p><xhtml:p>						&lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt;</xhtml:p><xhtml:p>						&lt;version&gt;2.16&lt;/version&gt;</xhtml:p><xhtml:p>					&lt;/dependency&gt;</xhtml:p><xhtml:p>				&lt;/dependencies&gt;</xhtml:p><xhtml:p>			&lt;/plugin&gt;</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p/></html><plain>&#13;
			&lt;!-- test插件, 仅测试名称为*Test的类,使用支持分组测试的surefire-junit47 driver --&gt;&#13;
			&lt;plugin&gt;&#13;
				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#13;
				&lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#13;
				&lt;version&gt;2.16&lt;/version&gt;&#13;
				&lt;configuration&gt;&#13;
					&lt;includes&gt;&#13;
						&lt;include&gt;**/*Test.java&lt;/include&gt;&#13;
					&lt;/includes&gt;&#13;
					&lt;argLine&gt;-Xmx256M&lt;/argLine&gt;&#13;
				&lt;/configuration&gt;&#13;
				&lt;dependencies&gt;&#13;
					&lt;dependency&gt;&#13;
						&lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;&#13;
						&lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt;&#13;
						&lt;version&gt;2.16&lt;/version&gt;&#13;
					&lt;/dependency&gt;&#13;
				&lt;/dependencies&gt;&#13;
			&lt;/plugin&gt;&#13;
&#13;
&#13;
</plain></notes><children><topics type="attached"><topic id="0512hugui5nmsm5dvhti8iihc5" timestamp="1398737039047"><title>跳过测试</title><notes><html><xhtml:p>如果想跳过测试阶段，可用：</xhtml:p><xhtml:p>mvn package -DskipTests</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>想临时性跳过测试代码的编译，可用：</xhtml:p><xhtml:p>mvn package -Dmaven.test.skip=true</xhtml:p><xhtml:p>maven.test.skip同时控制maven-compiler-plugin和maven-surefire-plugin两个插件的行为，即跳过编译，又跳过测试。</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p/><xhtml:p>//指定测试类</xhtml:p><xhtml:p>mvn test -Dtest=RandomGeneratorTest </xhtml:p><xhtml:p/><xhtml:p>//以Random开头，Test结尾的测试类</xhtml:p><xhtml:p>mvn test -Dtest=Random*Test</xhtml:p><xhtml:p/><xhtml:p>//用逗号分隔指定多个测试用例  </xhtml:p><xhtml:p>mvn test -Dtest=ATest,BTest</xhtml:p><xhtml:p>test参数必须匹配至少一个测试类，否则会报错并导致构建失败。此时可使用：</xhtml:p><xhtml:p>mvn test -Dtest -DfailIfNoTests=false 来指定即使没有任何测试用例也不要报错</xhtml:p><xhtml:p/></html><plain>如果想跳过测试阶段，可用：&#13;
mvn package -DskipTests&#13;
&#13;
&#13;
想临时性跳过测试代码的编译，可用：&#13;
mvn package -Dmaven.test.skip=true&#13;
maven.test.skip同时控制maven-compiler-plugin和maven-surefire-plugin两个插件的行为，即跳过编译，又跳过测试。&#13;
&#13;
&#13;
&#13;
//指定测试类&#13;
mvn test -Dtest=RandomGeneratorTest &#13;
&#13;
//以Random开头，Test结尾的测试类&#13;
mvn test -Dtest=Random*Test&#13;
&#13;
//用逗号分隔指定多个测试用例  &#13;
mvn test -Dtest=ATest,BTest&#13;
test参数必须匹配至少一个测试类，否则会报错并导致构建失败。此时可使用：&#13;
mvn test -Dtest -DfailIfNoTests=false 来指定即使没有任何测试用例也不要报错&#13;
</plain></notes></topic><topic id="423af2fqpdkfllhql55bn0jkao" timestamp="1398740045106"><title>测试覆盖率报告</title><notes><html><xhtml:p/><xhtml:p>			&lt;!-- cobertura插件, 设置不需要计算覆盖率的类 --&gt;</xhtml:p><xhtml:p>			&lt;plugin&gt;</xhtml:p><xhtml:p>				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</xhtml:p><xhtml:p>				&lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;version&gt;2.6&lt;/version&gt;</xhtml:p><xhtml:p>				&lt;configuration&gt;</xhtml:p><xhtml:p>					&lt;check&gt;</xhtml:p><xhtml:p>						&lt;branchRate&gt;60&lt;/branchRate&gt;</xhtml:p><xhtml:p>						&lt;lineRate&gt;70&lt;/lineRate&gt;</xhtml:p><xhtml:p>					&lt;/check&gt;</xhtml:p><xhtml:p>					&lt;instrumentation&gt;</xhtml:p><xhtml:p>						&lt;excludes&gt;</xhtml:p><xhtml:p>							&lt;exclude&gt;**/entity/**/*.class&lt;/exclude&gt;</xhtml:p><xhtml:p>							&lt;exclude&gt;**/*Controller.class&lt;/exclude&gt;</xhtml:p><xhtml:p>						&lt;/excludes&gt;</xhtml:p><xhtml:p>					&lt;/instrumentation&gt;</xhtml:p><xhtml:p>				&lt;/configuration&gt;</xhtml:p><xhtml:p>			&lt;/plugin&gt;</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>mvn cobertura:check</xhtml:p><xhtml:p>mvn cobertura:cobertura</xhtml:p></html><plain>&#13;
			&lt;!-- cobertura插件, 设置不需要计算覆盖率的类 --&gt;&#13;
			&lt;plugin&gt;&#13;
				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;&#13;
				&lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;&#13;
				&lt;version&gt;2.6&lt;/version&gt;&#13;
				&lt;configuration&gt;&#13;
					&lt;check&gt;&#13;
						&lt;branchRate&gt;60&lt;/branchRate&gt;&#13;
						&lt;lineRate&gt;70&lt;/lineRate&gt;&#13;
					&lt;/check&gt;&#13;
					&lt;instrumentation&gt;&#13;
						&lt;excludes&gt;&#13;
							&lt;exclude&gt;**/entity/**/*.class&lt;/exclude&gt;&#13;
							&lt;exclude&gt;**/*Controller.class&lt;/exclude&gt;&#13;
						&lt;/excludes&gt;&#13;
					&lt;/instrumentation&gt;&#13;
				&lt;/configuration&gt;&#13;
			&lt;/plugin&gt;&#13;
&#13;
&#13;
mvn cobertura:check&#13;
mvn cobertura:cobertura</plain></notes></topic></topics></children></topic><topic id="1grjs499p48joi56ntprbdde03" timestamp="1398741724206"><title>maven-enforcer-plugin</title><notes><html><xhtml:p>定义maven版本，java版本，os配置，文件系统的配置，或者你想扩展的任何配置，那么就可以使用Maven Enforcer Plugin这个maven插件</xhtml:p><xhtml:p/><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">enforcer:display-info</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">enforcer:enforce</xhtml:span></xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>      &lt;plugin&gt;  </xhtml:p><xhtml:p>        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </xhtml:p><xhtml:p>        &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;  </xhtml:p><xhtml:p>        &lt;version&gt;1.0.1&lt;/version&gt;  </xhtml:p><xhtml:p>        &lt;executions&gt;  </xhtml:p><xhtml:p>          &lt;execution&gt;  </xhtml:p><xhtml:p>            &lt;id&gt;enforce-versions&lt;/id&gt;  </xhtml:p><xhtml:p>            &lt;goals&gt;  </xhtml:p><xhtml:p>              &lt;goal&gt;enforce&lt;/goal&gt;  </xhtml:p><xhtml:p>            &lt;/goals&gt;  </xhtml:p><xhtml:p>            &lt;configuration&gt;  </xhtml:p><xhtml:p>              &lt;rules&gt;  </xhtml:p><xhtml:p>                &lt;requireMavenVersion&gt;  </xhtml:p><xhtml:p>                  &lt;version&gt;2.0.6&lt;/version&gt;  </xhtml:p><xhtml:p>                &lt;/requireMavenVersion&gt;  </xhtml:p><xhtml:p>                &lt;requireJavaVersion&gt;  </xhtml:p><xhtml:p>                  &lt;version&gt;1.5&lt;/version&gt;  </xhtml:p><xhtml:p>                &lt;/requireJavaVersion&gt;  </xhtml:p><xhtml:p>                &lt;requireOS&gt;  </xhtml:p><xhtml:p>                  &lt;family&gt;unix&lt;/family&gt;  </xhtml:p><xhtml:p>                &lt;/requireOS&gt;  </xhtml:p><xhtml:p>              &lt;/rules&gt;  </xhtml:p><xhtml:p>            &lt;/configuration&gt;  </xhtml:p><xhtml:p>          &lt;/execution&gt;  </xhtml:p><xhtml:p>        &lt;/executions&gt;  </xhtml:p><xhtml:p>      &lt;/plugin&gt;  </xhtml:p></html><plain>定义maven版本，java版本，os配置，文件系统的配置，或者你想扩展的任何配置，那么就可以使用Maven Enforcer Plugin这个maven插件&#13;
&#13;
enforcer:display-info&#13;
enforcer:enforce&#13;
&#13;
&#13;
      &lt;plugin&gt;  &#13;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  &#13;
        &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;  &#13;
        &lt;version&gt;1.0.1&lt;/version&gt;  &#13;
        &lt;executions&gt;  &#13;
          &lt;execution&gt;  &#13;
            &lt;id&gt;enforce-versions&lt;/id&gt;  &#13;
            &lt;goals&gt;  &#13;
              &lt;goal&gt;enforce&lt;/goal&gt;  &#13;
            &lt;/goals&gt;  &#13;
            &lt;configuration&gt;  &#13;
              &lt;rules&gt;  &#13;
                &lt;requireMavenVersion&gt;  &#13;
                  &lt;version&gt;2.0.6&lt;/version&gt;  &#13;
                &lt;/requireMavenVersion&gt;  &#13;
                &lt;requireJavaVersion&gt;  &#13;
                  &lt;version&gt;1.5&lt;/version&gt;  &#13;
                &lt;/requireJavaVersion&gt;  &#13;
                &lt;requireOS&gt;  &#13;
                  &lt;family&gt;unix&lt;/family&gt;  &#13;
                &lt;/requireOS&gt;  &#13;
              &lt;/rules&gt;  &#13;
            &lt;/configuration&gt;  &#13;
          &lt;/execution&gt;  &#13;
        &lt;/executions&gt;  &#13;
      &lt;/plugin&gt;  </plain></notes></topic></topics></children></topic></topics></children></topic><topic id="2trk0ge21il5ms58e60meuvnhs" timestamp="1398663032514"><title>tomcat-jdbc pool</title><notes><html><xhtml:p/><xhtml:p>		&lt;tomcat-jdbc.version&gt;7.0.53&lt;/tomcat-jdbc.version&gt;</xhtml:p><xhtml:p/><xhtml:p>		&lt;dependency&gt;</xhtml:p><xhtml:p>			&lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</xhtml:p><xhtml:p>			&lt;artifactId&gt;tomcat-jdbc&lt;/artifactId&gt;</xhtml:p><xhtml:p>			&lt;version&gt;${tomcat-jdbc.version}&lt;/version&gt;</xhtml:p><xhtml:p>			&lt;scope&gt;runtime&lt;/scope&gt;</xhtml:p><xhtml:p>		&lt;/dependency&gt;</xhtml:p></html><plain>&#13;
		&lt;tomcat-jdbc.version&gt;7.0.53&lt;/tomcat-jdbc.version&gt;&#13;
&#13;
		&lt;dependency&gt;&#13;
			&lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;&#13;
			&lt;artifactId&gt;tomcat-jdbc&lt;/artifactId&gt;&#13;
			&lt;version&gt;${tomcat-jdbc.version}&lt;/version&gt;&#13;
			&lt;scope&gt;runtime&lt;/scope&gt;&#13;
		&lt;/dependency&gt;</plain></notes></topic><topic id="1i03odb3rbitrd8vccpinfs544" timestamp="1398823305394"><title>spring-data-jpa</title><children><topics type="attached"><topic id="5t56unc4n89eb7rjb5a51e1i6g" timestamp="1398822574905"><title>jpa简介</title><notes><html><xhtml:p>目前比较成熟的 JPA 框架主要包括 Jboss 的 <xhtml:span style-id="4hf5emat9fs18l6crukki5o612">Hibernate EntityManager</xhtml:span>、Oracle 捐献给 Eclipse 社区的 EclipseLink、Apache 的 OpenJPA 等。</xhtml:p></html><plain>目前比较成熟的 JPA 框架主要包括 Jboss 的 Hibernate EntityManager、Oracle 捐献给 Eclipse 社区的 EclipseLink、Apache 的 OpenJPA 等。</plain></notes><children><topics type="attached"><topic id="4tfego6h2n7e2tn6m1ds2t7kgs" timestamp="1398822573961"><title>配置</title><notes><html><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">必须以persistence.xml命名，并放在classpath的META-INF下</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">META-INF/persistence.xml</xhtml:span></xhtml:p><xhtml:p>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</xhtml:p><xhtml:p>&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence" version="2.0"&gt;</xhtml:p><xhtml:p>	&lt;persistence-unit name="SimplePU" transaction-type="RESOURCE_LOCAL"&gt;</xhtml:p><xhtml:p>		&lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;</xhtml:p><xhtml:p>		&lt;class&gt;com.lejingw.apps.rawjpa.entity.AccountInfo&lt;/class&gt;</xhtml:p><xhtml:p>		&lt;class&gt;com.lejingw.apps.rawjpa.entity.UserInfo&lt;/class&gt;</xhtml:p><xhtml:p>		&lt;properties&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/test"/&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.connection.username" value="root"/&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.connection.password" value="111111"/&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"/&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.show_sql" value="true"/&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.format_sql" value="true"/&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.use_sql_comments" value="false"/&gt;</xhtml:p><xhtml:p>			&lt;property name="hibernate.hbm2ddl.auto" value="update"/&gt;</xhtml:p><xhtml:p>		&lt;/properties&gt;</xhtml:p><xhtml:p>	&lt;/persistence-unit&gt;</xhtml:p><xhtml:p>&lt;/persistence&gt;</xhtml:p><xhtml:p/><xhtml:p/></html><plain>必须以persistence.xml命名，并放在classpath的META-INF下&#13;
META-INF/persistence.xml&#13;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;&#13;
&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence" version="2.0"&gt;&#13;
	&lt;persistence-unit name="SimplePU" transaction-type="RESOURCE_LOCAL"&gt;&#13;
		&lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;&#13;
		&lt;class&gt;com.lejingw.apps.rawjpa.entity.AccountInfo&lt;/class&gt;&#13;
		&lt;class&gt;com.lejingw.apps.rawjpa.entity.UserInfo&lt;/class&gt;&#13;
		&lt;properties&gt;&#13;
			&lt;property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"/&gt;&#13;
			&lt;property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/test"/&gt;&#13;
			&lt;property name="hibernate.connection.username" value="root"/&gt;&#13;
			&lt;property name="hibernate.connection.password" value="111111"/&gt;&#13;
			&lt;property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"/&gt;&#13;
			&lt;property name="hibernate.show_sql" value="true"/&gt;&#13;
			&lt;property name="hibernate.format_sql" value="true"/&gt;&#13;
			&lt;property name="hibernate.use_sql_comments" value="false"/&gt;&#13;
			&lt;property name="hibernate.hbm2ddl.auto" value="update"/&gt;&#13;
		&lt;/properties&gt;&#13;
	&lt;/persistence-unit&gt;&#13;
&lt;/persistence&gt;&#13;
&#13;
</plain></notes></topic><topic id="47pslle33kmagcc30t4laattu1" timestamp="1398822612468"><title>获取、使用EntityManager</title><notes><html><xhtml:p>EntityManagerFactory emf = Persistence.createEntityManagerFactory("SimplePU"); </xhtml:p><xhtml:p>EntityManager em = emf.createEntityManager(); </xhtml:p><xhtml:p>em.getTransaction().begin(); </xhtml:p><xhtml:p>em.persist(accountInfo); </xhtml:p><xhtml:p>em.getTransaction().commit(); </xhtml:p><xhtml:p>emf.close(); </xhtml:p></html><plain>EntityManagerFactory emf = Persistence.createEntityManagerFactory("SimplePU"); &#13;
EntityManager em = emf.createEntityManager(); &#13;
em.getTransaction().begin(); &#13;
em.persist(accountInfo); &#13;
em.getTransaction().commit(); &#13;
emf.close(); </plain></notes></topic></topics></children></topic><topic id="5k7v86ic1f6ltkc3bcg619bedh" timestamp="1398823189010"><title>spring与jpa整合</title><children><topics type="attached"><topic id="1v0a5cikpf6qfjhlgnqmo5o6u8" timestamp="1398823764877"><title>配置</title><notes><html><xhtml:p>Spring 提供的 <xhtml:span style-id="4hf5emat9fs18l6crukki5o612">LocalContainerEntityManagerFactoryBean</xhtml:span> 提供了非常灵活的配置，persistence.xml 中的信息都可以在此以属性注入的方式提供</xhtml:p><xhtml:p>Spring 实现了部分在 EJB 容器环境下才具有的功能，比如对 <xhtml:span style-id="4hf5emat9fs18l6crukki5o612">@PersistenceContext、@PersistenceUnit 的容器注入支持</xhtml:span>。</xhtml:p><xhtml:p>Spring 将 <xhtml:span style-id="4hf5emat9fs18l6crukki5o612">EntityManager 的创建与销毁、事务管理</xhtml:span>等代码抽取出来，并由其<xhtml:span style-id="4hf5emat9fs18l6crukki5o612">统一管理</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="4hf5emat9fs18l6crukki5o612"/></xhtml:p><xhtml:p>spring.xml</xhtml:p><xhtml:p/><xhtml:p>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</xhtml:p><xhtml:p>&lt;beans xmlns="http://www.springframework.org/schema/beans"</xhtml:p><xhtml:p>	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</xhtml:p><xhtml:p>	xmlns:context="http://www.springframework.org/schema/context"</xhtml:p><xhtml:p>	xmlns:tx="http://www.springframework.org/schema/tx"</xhtml:p><xhtml:p>	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</xhtml:p><xhtml:p>			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</xhtml:p><xhtml:p>			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"&gt;</xhtml:p><xhtml:p/><xhtml:p>	&lt;context:component-scan base-package="com.lejingw.apps.springjpa" /&gt;</xhtml:p><xhtml:p/><xhtml:p>	&lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;</xhtml:p><xhtml:p/><xhtml:p>	&lt;bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"&gt;</xhtml:p><xhtml:p>		&lt;property name="entityManagerFactory" ref="entityManagerFactory" /&gt;</xhtml:p><xhtml:p>	&lt;/bean&gt;</xhtml:p><xhtml:p/><xhtml:p>	&lt;bean id="entityManagerFactory"</xhtml:p><xhtml:p>		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;</xhtml:p><xhtml:p>	&lt;/bean&gt;</xhtml:p><xhtml:p/><xhtml:p>&lt;/beans&gt;</xhtml:p></html><plain>Spring 提供的 LocalContainerEntityManagerFactoryBean 提供了非常灵活的配置，persistence.xml 中的信息都可以在此以属性注入的方式提供&#13;
Spring 实现了部分在 EJB 容器环境下才具有的功能，比如对 @PersistenceContext、@PersistenceUnit 的容器注入支持。&#13;
Spring 将 EntityManager 的创建与销毁、事务管理等代码抽取出来，并由其统一管理&#13;
&#13;
spring.xml&#13;
&#13;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;&#13;
&lt;beans xmlns="http://www.springframework.org/schema/beans"&#13;
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&#13;
	xmlns:context="http://www.springframework.org/schema/context"&#13;
	xmlns:tx="http://www.springframework.org/schema/tx"&#13;
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#13;
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&#13;
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"&gt;&#13;
&#13;
	&lt;context:component-scan base-package="com.lejingw.apps.springjpa" /&gt;&#13;
&#13;
	&lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;&#13;
&#13;
	&lt;bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"&gt;&#13;
		&lt;property name="entityManagerFactory" ref="entityManagerFactory" /&gt;&#13;
	&lt;/bean&gt;&#13;
&#13;
	&lt;bean id="entityManagerFactory"&#13;
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;&#13;
	&lt;/bean&gt;&#13;
&#13;
&lt;/beans&gt;</plain></notes></topic><topic id="6fr1fgms9s40evea90gvq7pvqt" timestamp="1398823300619"><title>使用</title><notes><html><xhtml:p>service层</xhtml:p><xhtml:p/><xhtml:p>	@Autowired</xhtml:p><xhtml:p>	private UserDao userDao;</xhtml:p><xhtml:p/><xhtml:p>	@Transactional</xhtml:p><xhtml:p>	public Long createNewAccount(String username, String password,</xhtml:p><xhtml:p>			Integer initBalance) {</xhtml:p><xhtml:p>		...</xhtml:p><xhtml:p>		return userDao.save(accountInfo);</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>dao层</xhtml:p><xhtml:p/><xhtml:p>	@PersistenceContext</xhtml:p><xhtml:p>	private EntityManager em;</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>	public Long save(AccountInfo accountInfo) {</xhtml:p><xhtml:p>		em.persist(accountInfo);</xhtml:p><xhtml:p>		return accountInfo.getAccountId();</xhtml:p><xhtml:p>	}</xhtml:p></html><plain>service层&#13;
&#13;
	@Autowired&#13;
	private UserDao userDao;&#13;
&#13;
	@Transactional&#13;
	public Long createNewAccount(String username, String password,&#13;
			Integer initBalance) {&#13;
		...&#13;
		return userDao.save(accountInfo);&#13;
	}&#13;
&#13;
&#13;
dao层&#13;
&#13;
	@PersistenceContext&#13;
	private EntityManager em;&#13;
	&#13;
	public Long save(AccountInfo accountInfo) {&#13;
		em.persist(accountInfo);&#13;
		return accountInfo.getAccountId();&#13;
	}</plain></notes></topic></topics></children></topic><topic id="028jndo3e6ns9o1kcbvnjt9dh7" timestamp="1398824526945"><title>Spring Data JPA</title><notes><html><xhtml:p>Spring Data JPA 框架，主要针对的就是 Spring 唯一没有简化到的业务逻辑代码，至此，开发者连仅剩的实现<xhtml:span style-id="4hf5emat9fs18l6crukki5o612">持久层业务逻辑</xhtml:span>的工作都省了，唯一要做的，就<xhtml:span style-id="4hf5emat9fs18l6crukki5o612">只是声明持久层的接口</xhtml:span>，其他都交给 Spring Data JPA 来帮你完成！</xhtml:p><xhtml:p/><xhtml:p>Spring Data JPA 做的便是规范方法的名字，根据符合规范的名字来确定方法需要实现什么样的逻辑。</xhtml:p><xhtml:p/><xhtml:p>Spring Data JPA 的发布包（需要同时下载 Spring Data Commons 和 Spring Data JPA 两个发布包，Commons 是 Spring Data 的公共基础包）</xhtml:p></html><plain>Spring Data JPA 框架，主要针对的就是 Spring 唯一没有简化到的业务逻辑代码，至此，开发者连仅剩的实现持久层业务逻辑的工作都省了，唯一要做的，就只是声明持久层的接口，其他都交给 Spring Data JPA 来帮你完成！&#13;
&#13;
Spring Data JPA 做的便是规范方法的名字，根据符合规范的名字来确定方法需要实现什么样的逻辑。&#13;
&#13;
Spring Data JPA 的发布包（需要同时下载 Spring Data Commons 和 Spring Data JPA 两个发布包，Commons 是 Spring Data 的公共基础包）</plain></notes><children><topics type="attached"><topic id="5csqnhaqgv1r3laeke2apt9ifa" timestamp="1398824125005"><title>配置</title><notes><html><xhtml:p>首先，让持久层接口 UserDao <xhtml:span style-id="4hf5emat9fs18l6crukki5o612">继承 Repository 接口</xhtml:span>。该接口使用了泛型，需要为其提供两个类型：第一个为该接口处理的域对象类型，第二个为该域对象的主键类型。</xhtml:p><xhtml:p>	与继承 Repository 等价的一种方式，就是在持久层接口上使用 @RepositoryDefinition 注解，并为其指定 domainClass 和 idClass 属性<xhtml:span style-id="6hco9tv09oil6o32ck82h1lo90"/></xhtml:p><xhtml:p><xhtml:span style-id="6hco9tv09oil6o32ck82h1lo90">	以下两种方式完全等价：</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="7gfai0ihts66o04l7qguiv29m3">	public interface UserDao extends Repository&lt;AccountInfo, Long&gt; { …… } </xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="7gfai0ihts66o04l7qguiv29m3">	</xhtml:span><xhtml:span style-id="4hf5emat9fs18l6crukki5o612">@RepositoryDefinition(domainClass = AccountInfo.class, idClass = Long.class) </xhtml:span><xhtml:span style-id="7gfai0ihts66o04l7qguiv29m3"/></xhtml:p><xhtml:p><xhtml:span style-id="7gfai0ihts66o04l7qguiv29m3">	public interface UserDao { …… } </xhtml:span></xhtml:p><xhtml:p/><xhtml:p>其次， 我们需要在 Spring 配置文件中增加如下配置，以使 Spring 识别出需要为其实现的持久层接口：</xhtml:p><xhtml:p>	引入jpa命名空间</xhtml:p><xhtml:p>	xmlns:jpa="http://www.springframework.org/schema/data/jpa"</xhtml:p><xhtml:p>	xsi:schemaLocation="http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd"&gt;</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>	&lt;-- 需要在 &lt;beans&gt; 标签中增加对 jpa 命名空间的引用 --&gt; </xhtml:p><xhtml:p>	&lt;jpa:repositories base-package="com.lejingw.apps.springdatajpa.dao"</xhtml:p><xhtml:p>		repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactory"</xhtml:p><xhtml:p>		transaction-manager-ref="transactionManager" /&gt;</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p/></html><plain>首先，让持久层接口 UserDao 继承 Repository 接口。该接口使用了泛型，需要为其提供两个类型：第一个为该接口处理的域对象类型，第二个为该域对象的主键类型。&#13;
	与继承 Repository 等价的一种方式，就是在持久层接口上使用 @RepositoryDefinition 注解，并为其指定 domainClass 和 idClass 属性&#13;
	以下两种方式完全等价：&#13;
	public interface UserDao extends Repository&lt;AccountInfo, Long&gt; { …… } &#13;
	@RepositoryDefinition(domainClass = AccountInfo.class, idClass = Long.class) &#13;
	public interface UserDao { …… } &#13;
&#13;
其次， 我们需要在 Spring 配置文件中增加如下配置，以使 Spring 识别出需要为其实现的持久层接口：&#13;
	引入jpa命名空间&#13;
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"&#13;
	xsi:schemaLocation="http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd"&gt;&#13;
	&#13;
	&lt;-- 需要在 &lt;beans&gt; 标签中增加对 jpa 命名空间的引用 --&gt; &#13;
	&lt;jpa:repositories base-package="com.lejingw.apps.springdatajpa.dao"&#13;
		repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactory"&#13;
		transaction-manager-ref="transactionManager" /&gt;&#13;
&#13;
&#13;
</plain></notes></topic><topic id="2mvd6i3m78qp4206fiohs6fho6" timestamp="1398824465554"><title>Repository接口</title><notes><html><xhtml:p>CrudRepository</xhtml:p><xhtml:p>如果持久层接口较多，且每一个接口都需要声明相似的增删改查方法，直接继承 Repository 就显得有些啰嗦，这时可以继承 CrudRepository，它会自动为域对象创建增删改查方法，供业务层直接使用。开发者只是多写了 "Crud" 四个字母，即刻便为域对象提供了开箱即用的十个增删改查方法。</xhtml:p><xhtml:p>但是，使用 CrudRepository 也有副作用，它可能暴露了你不希望暴露给业务层的方法。比如某些接口你只希望提供增加的操作而不希望提供删除的方法。针对这种情况，开发者只能退回到 Repository 接口，然后到 CrudRepository 中把希望保留的方法声明复制到自定义的接口中即可。</xhtml:p><xhtml:p/><xhtml:p>PagingAndSortingRepository----分页查询和排序</xhtml:p><xhtml:p>它继承自 CrudRepository 接口，在 CrudRepository 基础上新增了两个与分页有关的方法。但是，我们很少会将自定义的持久层接口直接继承自 PagingAndSortingRepository，而是在继承 Repository 或 CrudRepository 的基础上，在自己声明的方法参数列表最后增加一个 Pageable 或 Sort 类型的参数，用于指定分页或排序信息即可，这比直接使用 PagingAndSortingRepository 提供了更大的灵活性。</xhtml:p><xhtml:p/><xhtml:p>JpaRepository</xhtml:p><xhtml:p>继承自 PagingAndSortingRepository 的针对 JPA 技术提供的接口，它在父接口的基础上，提供了其他一些方法，比如 flush()，saveAndFlush()，deleteInBatch() 等。如果有这样的需求，则可以继承该接口。</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p/></html><plain>CrudRepository&#13;
如果持久层接口较多，且每一个接口都需要声明相似的增删改查方法，直接继承 Repository 就显得有些啰嗦，这时可以继承 CrudRepository，它会自动为域对象创建增删改查方法，供业务层直接使用。开发者只是多写了 "Crud" 四个字母，即刻便为域对象提供了开箱即用的十个增删改查方法。&#13;
但是，使用 CrudRepository 也有副作用，它可能暴露了你不希望暴露给业务层的方法。比如某些接口你只希望提供增加的操作而不希望提供删除的方法。针对这种情况，开发者只能退回到 Repository 接口，然后到 CrudRepository 中把希望保留的方法声明复制到自定义的接口中即可。&#13;
&#13;
PagingAndSortingRepository----分页查询和排序&#13;
它继承自 CrudRepository 接口，在 CrudRepository 基础上新增了两个与分页有关的方法。但是，我们很少会将自定义的持久层接口直接继承自 PagingAndSortingRepository，而是在继承 Repository 或 CrudRepository 的基础上，在自己声明的方法参数列表最后增加一个 Pageable 或 Sort 类型的参数，用于指定分页或排序信息即可，这比直接使用 PagingAndSortingRepository 提供了更大的灵活性。&#13;
&#13;
JpaRepository&#13;
继承自 PagingAndSortingRepository 的针对 JPA 技术提供的接口，它在父接口的基础上，提供了其他一些方法，比如 flush()，saveAndFlush()，deleteInBatch() 等。如果有这样的需求，则可以继承该接口。&#13;
&#13;
&#13;
</plain></notes></topic><topic id="69umpps4o0ninv6umnvcm0siac" timestamp="1398825093016"><title>查询</title><children><topics type="attached"><topic id="6ftmmqa9n1t1ct9lrhqng0d6er" timestamp="1398824572965"><title>通过解析方法名创建查询</title><notes><html><xhtml:p>该功能其实并非 Spring Data JPA 首创，而是源自一个开源的 JPA 框架 Hades，该框架的作者 Oliver Gierke 本身又是 Spring Data JPA 项目的 Leader，所以把 Hades 的优势引入到 Spring Data JPA 也就是顺理成章的了。</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p/></html><plain>该功能其实并非 Spring Data JPA 首创，而是源自一个开源的 JPA 框架 Hades，该框架的作者 Oliver Gierke 本身又是 Spring Data JPA 项目的 Leader，所以把 Hades 的优势引入到 Spring Data JPA 也就是顺理成章的了。&#13;
&#13;
&#13;
</plain></notes></topic><topic id="2ct6ojmih754irotrunq13f0iq" timestamp="1398825093008"><title>使用 @Query 创建查询</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="4il2esjr6s8q8q04uqcucflb2h" timestamp="1398822328264"><title>框架</title></topic><topic id="3u0cr375stcbchclomkde7j15a" timestamp="1398822328264"><title>SiteMesh</title><notes><html><xhtml:p/><xhtml:p>		&lt;sitemesh.version&gt;2.4.2&lt;/sitemesh.version&gt;</xhtml:p><xhtml:p>		&lt;dependency&gt;</xhtml:p><xhtml:p>			&lt;groupId&gt;opensymphony&lt;/groupId&gt;</xhtml:p><xhtml:p>			&lt;artifactId&gt;sitemesh&lt;/artifactId&gt;</xhtml:p><xhtml:p>			&lt;version&gt;${sitemesh.version}&lt;/version&gt;</xhtml:p><xhtml:p>			&lt;scope&gt;runtime&lt;/scope&gt;</xhtml:p><xhtml:p>		&lt;/dependency&gt;</xhtml:p></html><plain>&#13;
		&lt;sitemesh.version&gt;2.4.2&lt;/sitemesh.version&gt;&#13;
		&lt;dependency&gt;&#13;
			&lt;groupId&gt;opensymphony&lt;/groupId&gt;&#13;
			&lt;artifactId&gt;sitemesh&lt;/artifactId&gt;&#13;
			&lt;version&gt;${sitemesh.version}&lt;/version&gt;&#13;
			&lt;scope&gt;runtime&lt;/scope&gt;&#13;
		&lt;/dependency&gt;</plain></notes><children><topics type="attached"><topic id="7sviec867ptit2btoic59fv7on" timestamp="1398735634060"><title>SiteMesh模板</title><notes><html><xhtml:p>&lt;%@ taglib prefix="sitemesh" uri="http://www.opensymphony.com/sitemesh/decorator" %&gt;</xhtml:p><xhtml:p>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;</xhtml:p><xhtml:p>&lt;c:set var="ctx" value="${pageContext.request.contextPath}" /&gt;</xhtml:p><xhtml:p/><xhtml:p>&lt;head&gt;</xhtml:p><xhtml:p>	&lt;title&gt;QuickStart示例:&lt;sitemesh:title/&gt;&lt;/title&gt;</xhtml:p><xhtml:p>	&lt;script src="${ctx}/static/jquery-validation/1.11.1/jquery.validate.min.js" type="text/javascript"&gt;&lt;/script&gt;</xhtml:p><xhtml:p>	&lt;sitemesh:head/&gt;</xhtml:p><xhtml:p>&lt;/head&gt;</xhtml:p><xhtml:p/><xhtml:p>&lt;body&gt;</xhtml:p><xhtml:p>		&lt;div id="content"&gt;</xhtml:p><xhtml:p>			&lt;sitemesh:body/&gt;</xhtml:p><xhtml:p>		&lt;/div&gt;</xhtml:p><xhtml:p>&lt;/body&gt;</xhtml:p></html><plain>&lt;%@ taglib prefix="sitemesh" uri="http://www.opensymphony.com/sitemesh/decorator" %&gt;&#13;
&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&#13;
&lt;c:set var="ctx" value="${pageContext.request.contextPath}" /&gt;&#13;
&#13;
&lt;head&gt;&#13;
	&lt;title&gt;QuickStart示例:&lt;sitemesh:title/&gt;&lt;/title&gt;&#13;
	&lt;script src="${ctx}/static/jquery-validation/1.11.1/jquery.validate.min.js" type="text/javascript"&gt;&lt;/script&gt;&#13;
	&lt;sitemesh:head/&gt;&#13;
&lt;/head&gt;&#13;
&#13;
&lt;body&gt;&#13;
		&lt;div id="content"&gt;&#13;
			&lt;sitemesh:body/&gt;&#13;
		&lt;/div&gt;&#13;
&lt;/body&gt;</plain></notes></topic><topic id="0u2nuf5n2berk1tuj2nloo95lr" timestamp="1398735614169"><title>decorators.xml</title><notes><html><xhtml:p>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</xhtml:p><xhtml:p>&lt;decorators defaultdir="/WEB-INF/layouts/"&gt;</xhtml:p><xhtml:p>	&lt;excludes&gt;</xhtml:p><xhtml:p>		&lt;pattern&gt;/static/*&lt;/pattern&gt;</xhtml:p><xhtml:p>		&lt;pattern&gt;/api/*&lt;/pattern&gt;</xhtml:p><xhtml:p>	&lt;/excludes&gt;</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>	&lt;decorator name="default" page="default.jsp"&gt;</xhtml:p><xhtml:p>		&lt;pattern&gt;/*&lt;/pattern&gt;</xhtml:p><xhtml:p>	&lt;/decorator&gt;</xhtml:p><xhtml:p>&lt;/decorators&gt;</xhtml:p><xhtml:p/></html><plain>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&#13;
&lt;decorators defaultdir="/WEB-INF/layouts/"&gt;&#13;
	&lt;excludes&gt;&#13;
		&lt;pattern&gt;/static/*&lt;/pattern&gt;&#13;
		&lt;pattern&gt;/api/*&lt;/pattern&gt;&#13;
	&lt;/excludes&gt;&#13;
	&#13;
	&lt;decorator name="default" page="default.jsp"&gt;&#13;
		&lt;pattern&gt;/*&lt;/pattern&gt;&#13;
	&lt;/decorator&gt;&#13;
&lt;/decorators&gt;&#13;
</plain></notes></topic><topic id="431h2neoiqnp60bqa93fqvcq2q" timestamp="1398735583789"><title>web.xml</title><notes><html><xhtml:p/><xhtml:p>	&lt;filter&gt;</xhtml:p><xhtml:p>		&lt;filter-name&gt;sitemeshFilter&lt;/filter-name&gt;</xhtml:p><xhtml:p>		&lt;filter-class&gt;com.opensymphony.sitemesh.webapp.SiteMeshFilter&lt;/filter-class&gt;</xhtml:p><xhtml:p>	&lt;/filter&gt;</xhtml:p><xhtml:p>	&lt;filter-mapping&gt;</xhtml:p><xhtml:p>		&lt;filter-name&gt;sitemeshFilter&lt;/filter-name&gt;</xhtml:p><xhtml:p>		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</xhtml:p><xhtml:p>	&lt;/filter-mapping&gt;</xhtml:p></html><plain>&#13;
	&lt;filter&gt;&#13;
		&lt;filter-name&gt;sitemeshFilter&lt;/filter-name&gt;&#13;
		&lt;filter-class&gt;com.opensymphony.sitemesh.webapp.SiteMeshFilter&lt;/filter-class&gt;&#13;
	&lt;/filter&gt;&#13;
	&lt;filter-mapping&gt;&#13;
		&lt;filter-name&gt;sitemeshFilter&lt;/filter-name&gt;&#13;
		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;&#13;
	&lt;/filter-mapping&gt;</plain></notes></topic></topics></children></topic><topic id="3h9794sa8k7doof18f7e5ch7q2" timestamp="1398822324858"><title>分支主题 4</title><children><topics type="attached"><topic id="2du33t9mabkok3r1fbncqlb5o4" timestamp="1398736088316"><title>guava</title><notes><html><xhtml:p/><xhtml:p>		&lt;dependency&gt;</xhtml:p><xhtml:p>			&lt;groupId&gt;com.google.guava&lt;/groupId&gt;</xhtml:p><xhtml:p>			&lt;artifactId&gt;guava&lt;/artifactId&gt;</xhtml:p><xhtml:p>			&lt;version&gt;${guava.version}&lt;/version&gt;</xhtml:p><xhtml:p>		&lt;/dependency&gt;</xhtml:p></html><plain>&#13;
		&lt;dependency&gt;&#13;
			&lt;groupId&gt;com.google.guava&lt;/groupId&gt;&#13;
			&lt;artifactId&gt;guava&lt;/artifactId&gt;&#13;
			&lt;version&gt;${guava.version}&lt;/version&gt;&#13;
		&lt;/dependency&gt;</plain></notes></topic><topic id="447m7ff2etaoi7svlb2q04dlhn" timestamp="1398735932882"><title>mockito</title></topic><topic id="0gdrvuqddlvlbh04v9e4bun0bp" timestamp="1398735947791"><title>selenium</title></topic><topic id="07kf44poma4udprhrmcib4oihd" timestamp="1398736084103"><title>jackson</title><notes><html><xhtml:p/><xhtml:p>		&lt;!-- JSON begin --&gt;</xhtml:p><xhtml:p>		&lt;dependency&gt;</xhtml:p><xhtml:p>			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</xhtml:p><xhtml:p>			&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</xhtml:p><xhtml:p>			&lt;version&gt;${jackson.version}&lt;/version&gt;</xhtml:p><xhtml:p>		&lt;/dependency&gt;</xhtml:p><xhtml:p>		&lt;dependency&gt;</xhtml:p><xhtml:p>			&lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;</xhtml:p><xhtml:p>			&lt;artifactId&gt;jackson-module-jaxb-annotations&lt;/artifactId&gt;</xhtml:p><xhtml:p>			&lt;version&gt;${jackson.version}&lt;/version&gt;</xhtml:p><xhtml:p>		&lt;/dependency&gt;</xhtml:p><xhtml:p>		&lt;!-- JSON end --&gt;</xhtml:p></html><plain>&#13;
		&lt;!-- JSON begin --&gt;&#13;
		&lt;dependency&gt;&#13;
			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#13;
			&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&#13;
			&lt;version&gt;${jackson.version}&lt;/version&gt;&#13;
		&lt;/dependency&gt;&#13;
		&lt;dependency&gt;&#13;
			&lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;&#13;
			&lt;artifactId&gt;jackson-module-jaxb-annotations&lt;/artifactId&gt;&#13;
			&lt;version&gt;${jackson.version}&lt;/version&gt;&#13;
		&lt;/dependency&gt;&#13;
		&lt;!-- JSON end --&gt;</plain></notes></topic></topics></children></topic></topics></children></topic><title>画布 1</title></sheet></xmap-revision-content>