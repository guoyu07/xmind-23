<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="3m6v67ab0mnjdu62149kathb2p" timestamp="1384915076200" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="2r9it7urghqib6piup0p2sqhpm" structure-class="org.xmind.ui.map.clockwise" timestamp="1384842344833"><title>Web Service</title><children><topics type="attached"><topic id="3nm3dcgai9pbeds222m95c8s4p" timestamp="1384496424872"><title>1、自底向上（代码优先）</title><children><topics type="attached"><topic id="0lnqo6qujue5qigrcfcni10lq6" timestamp="1384911620513"><title>1、添加依赖类并修改web.xml</title><notes><html><xhtml:p>1、添加依赖jar包</xhtml:p><xhtml:p>        &lt;!-- 用于和spring集成使用 --&gt;</xhtml:p><xhtml:p>		&lt;dependency&gt;</xhtml:p><xhtml:p>			&lt;groupId&gt;org.jvnet.jax-ws-commons.spring&lt;/groupId&gt;</xhtml:p><xhtml:p>			&lt;artifactId&gt;jaxws-spring&lt;/artifactId&gt;</xhtml:p><xhtml:p>			&lt;version&gt;1.8&lt;/version&gt;</xhtml:p><xhtml:p>			&lt;exclusions&gt;</xhtml:p><xhtml:p>				&lt;exclusion&gt;</xhtml:p><xhtml:p>					&lt;groupId&gt;org.springframework&lt;/groupId&gt;</xhtml:p><xhtml:p>					&lt;artifactId&gt;spring&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;/exclusion&gt;</xhtml:p><xhtml:p>				&lt;exclusion&gt;</xhtml:p><xhtml:p>					&lt;groupId&gt;org.springframework&lt;/groupId&gt;</xhtml:p><xhtml:p>					&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;/exclusion&gt;</xhtml:p><xhtml:p>				&lt;exclusion&gt;</xhtml:p><xhtml:p>					&lt;groupId&gt;org.springframework&lt;/groupId&gt;</xhtml:p><xhtml:p>					&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;/exclusion&gt;</xhtml:p><xhtml:p>				&lt;exclusion&gt;</xhtml:p><xhtml:p>					&lt;groupId&gt;com.sun.xml.stream.buffer&lt;/groupId&gt;</xhtml:p><xhtml:p>					&lt;artifactId&gt;streambuffer&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;/exclusion&gt;</xhtml:p><xhtml:p>				&lt;exclusion&gt;</xhtml:p><xhtml:p>					&lt;groupId&gt;org.jvnet.staxex&lt;/groupId&gt;</xhtml:p><xhtml:p>					&lt;artifactId&gt;stax-ex&lt;/artifactId&gt;</xhtml:p><xhtml:p>				&lt;/exclusion&gt;</xhtml:p><xhtml:p>			&lt;/exclusions&gt;</xhtml:p><xhtml:p>		&lt;/dependency&gt;</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		&lt;dependency&gt;</xhtml:p><xhtml:p>			&lt;groupId&gt;com.sun.xml.ws&lt;/groupId&gt;</xhtml:p><xhtml:p>			&lt;artifactId&gt;jaxws-rt&lt;/artifactId&gt;</xhtml:p><xhtml:p>			&lt;version&gt;2.2.6&lt;/version&gt;</xhtml:p><xhtml:p>		&lt;/dependency&gt;</xhtml:p><xhtml:p/><xhtml:p>2、修改web.xml</xhtml:p><xhtml:p>   a、添加linstener</xhtml:p><xhtml:p>        <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">注意：添加在spring linstener之后，</xhtml:span><xhtml:span style-id="34tb9e38vfpiedovdpt4dept3l">也可以不添加，若不添加，则不需要sun-jaxws.xml文件</xhtml:span></xhtml:p><xhtml:p>	&lt;listener&gt;</xhtml:p><xhtml:p>        &lt;listener-class&gt;com.sun.xml.ws.transport.http.servlet.WSServletContextListener&lt;/listener-class&gt;</xhtml:p><xhtml:p>    &lt;/listener&gt;</xhtml:p><xhtml:p/><xhtml:p>  b、添加servlet</xhtml:p><xhtml:p>	&lt;servlet&gt;</xhtml:p><xhtml:p>        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;</xhtml:p><xhtml:p>        &lt;!-- &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSServlet&lt;/servlet-class&gt; --&gt;</xhtml:p><xhtml:p>        &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSSpringServlet&lt;/servlet-class&gt;</xhtml:p><xhtml:p>        &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</xhtml:p><xhtml:p>    &lt;/servlet&gt;</xhtml:p><xhtml:p>    &lt;servlet-mapping&gt;</xhtml:p><xhtml:p>        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;</xhtml:p><xhtml:p>        &lt;url-pattern&gt;/HelloService&lt;/url-pattern&gt;</xhtml:p><xhtml:p>    &lt;/servlet-mapping&gt;</xhtml:p><xhtml:p>    &lt;servlet-mapping&gt;</xhtml:p><xhtml:p>        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;</xhtml:p><xhtml:p>        &lt;url-pattern&gt;/Hello2Service&lt;/url-pattern&gt;</xhtml:p><xhtml:p>    &lt;/servlet-mapping&gt;</xhtml:p><xhtml:p/></html><plain>1、添加依赖jar包
        &lt;!-- 用于和spring集成使用 --&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.jvnet.jax-ws-commons.spring&lt;/groupId&gt;
			&lt;artifactId&gt;jaxws-spring&lt;/artifactId&gt;
			&lt;version&gt;1.8&lt;/version&gt;
			&lt;exclusions&gt;
				&lt;exclusion&gt;
					&lt;groupId&gt;org.springframework&lt;/groupId&gt;
					&lt;artifactId&gt;spring&lt;/artifactId&gt;
				&lt;/exclusion&gt;
				&lt;exclusion&gt;
					&lt;groupId&gt;org.springframework&lt;/groupId&gt;
					&lt;artifactId&gt;spring-core&lt;/artifactId&gt;
				&lt;/exclusion&gt;
				&lt;exclusion&gt;
					&lt;groupId&gt;org.springframework&lt;/groupId&gt;
					&lt;artifactId&gt;spring-context&lt;/artifactId&gt;
				&lt;/exclusion&gt;
				&lt;exclusion&gt;
					&lt;groupId&gt;com.sun.xml.stream.buffer&lt;/groupId&gt;
					&lt;artifactId&gt;streambuffer&lt;/artifactId&gt;
				&lt;/exclusion&gt;
				&lt;exclusion&gt;
					&lt;groupId&gt;org.jvnet.staxex&lt;/groupId&gt;
					&lt;artifactId&gt;stax-ex&lt;/artifactId&gt;
				&lt;/exclusion&gt;
			&lt;/exclusions&gt;
		&lt;/dependency&gt;
		
		&lt;dependency&gt;
			&lt;groupId&gt;com.sun.xml.ws&lt;/groupId&gt;
			&lt;artifactId&gt;jaxws-rt&lt;/artifactId&gt;
			&lt;version&gt;2.2.6&lt;/version&gt;
		&lt;/dependency&gt;

2、修改web.xml
   a、添加linstener
        注意：添加在spring linstener之后，也可以不添加，若不添加，则不需要sun-jaxws.xml文件
	&lt;listener&gt;
        &lt;listener-class&gt;com.sun.xml.ws.transport.http.servlet.WSServletContextListener&lt;/listener-class&gt;
    &lt;/listener&gt;

  b、添加servlet
	&lt;servlet&gt;
        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;
        &lt;!-- &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSServlet&lt;/servlet-class&gt; --&gt;
        &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSSpringServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/HelloService&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/Hello2Service&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
</plain></notes></topic><topic id="2cklrap4bd3c7pp75pv51v6uda" timestamp="1384913899777"><title>2、创建发布类</title><notes><html><xhtml:p>//@WebService(endpointInterface = "com.lejingw.apps.ws2.IHelloWsService",</xhtml:p><xhtml:p>//			serviceName = "HelloWsService",</xhtml:p><xhtml:p>//			targetNamespace = "http://ws.apps.lejingw.com",</xhtml:p><xhtml:p>//			portName = "HelloWsServicePort",</xhtml:p><xhtml:p>//  		wsdlLocation = "META-INF/wsdl/hello.wsdl")</xhtml:p><xhtml:p>//			wsdlLocation = "/WEB-INF/wsdl/hello.wsdl")</xhtml:p><xhtml:p>@WebService(</xhtml:p><xhtml:p>serviceName = "Hello2WsService",</xhtml:p><xhtml:p>targetNamespace = "http://ws2.apps.lejingw.com",</xhtml:p><xhtml:p>portName = "Hello2WsServicePort"</xhtml:p><xhtml:p>)</xhtml:p><xhtml:p/><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c">可选的WebService属性有：</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c">name						可选，the name of the wsdl:portType</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c">serviceName				the name of the wsdl:service</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c">targetNamespace		接口类要添加@WebService注释，并指定其targetNamespace，一定要与实现类保持一致</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c">                                 如果实现类targetNamespace为"http://ws4.apps.lejingw.com"</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c">                                 若接口不指明targetNamespace，则默认为"http://ws4.apps.lejingw.com/"</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c">portName					the name of the wsdl:port</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c">wsdlLocation</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c"/></xhtml:p><xhtml:p><xhtml:span style-id="51udakdn60ocfie68fehh71i2c"/></xhtml:p><xhtml:p>不能添加的WebService注释属性有：</xhtml:p><xhtml:p>endpointInterface</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p/><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">类名用WebService注释</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">方法名用WebMethod注释</xhtml:span></xhtml:p><xhtml:p/></html><plain>//@WebService(endpointInterface = "com.lejingw.apps.ws2.IHelloWsService",
//			serviceName = "HelloWsService",
//			targetNamespace = "http://ws.apps.lejingw.com",
//			portName = "HelloWsServicePort",
//  		wsdlLocation = "META-INF/wsdl/hello.wsdl")
//			wsdlLocation = "/WEB-INF/wsdl/hello.wsdl")
@WebService(
serviceName = "Hello2WsService",
targetNamespace = "http://ws2.apps.lejingw.com",
portName = "Hello2WsServicePort"
)

可选的WebService属性有：
name						可选，the name of the wsdl:portType
serviceName				the name of the wsdl:service
targetNamespace		接口类要添加@WebService注释，并指定其targetNamespace，一定要与实现类保持一致
                                 如果实现类targetNamespace为"http://ws4.apps.lejingw.com"
                                 若接口不指明targetNamespace，则默认为"http://ws4.apps.lejingw.com/"
portName					the name of the wsdl:port
wsdlLocation


不能添加的WebService注释属性有：
endpointInterface



类名用WebService注释
方法名用WebMethod注释
</plain></notes><children><topics type="attached"><topic id="3cdjmj3scg3260gruv8m50us6v" timestamp="1384484871393" xlink:href="xap:attachments/09enrh9gkhbi794aptkfutf2s5.java"><title>Hello2WsService.java</title></topic></topics></children></topic><topic id="3uoeeam2jdobdsrm7vhktr9f8e" timestamp="1384507455913"><title>3、添加wsgen的maven插件，生成wsdl文件</title><notes><html><xhtml:p>https://jax-ws-commons.java.net/jaxws-maven-plugin/</xhtml:p><xhtml:p/><xhtml:p>生成wsdl 和 xsd 文件</xhtml:p><xhtml:p>clean compile jaxws:wsgen</xhtml:p><xhtml:p/><xhtml:p>			&lt;plugin&gt;</xhtml:p><xhtml:p>				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</xhtml:p><xhtml:p>				&lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>                 &lt;!--</xhtml:p><xhtml:p>	       		&lt;executions&gt;</xhtml:p><xhtml:p>	       			&lt;execution&gt;</xhtml:p><xhtml:p>	       				&lt;phase&gt;compile&lt;/phase&gt;</xhtml:p><xhtml:p>	       				&lt;goals&gt;</xhtml:p><xhtml:p>	       					&lt;goal&gt;wsgen&lt;/goal&gt;</xhtml:p><xhtml:p>	       				&lt;/goals&gt;</xhtml:p><xhtml:p>	       			&lt;/execution&gt;</xhtml:p><xhtml:p>	       		&lt;/executions&gt;</xhtml:p><xhtml:p>                  --&gt;</xhtml:p><xhtml:p>				&lt;configuration&gt;</xhtml:p><xhtml:p>					&lt;genWsdl&gt;true&lt;/genWsdl&gt;</xhtml:p><xhtml:p>					&lt;resourceDestDir&gt;src/main/resources/wsdl2&lt;/resourceDestDir&gt;</xhtml:p><xhtml:p>					&lt;sei&gt;com.lejingw.apps.ws2.Hello2WsService&lt;/sei&gt;</xhtml:p><xhtml:p>					&lt;keep&gt;true&lt;/keep&gt;</xhtml:p><xhtml:p>					&lt;!-- </xhtml:p><xhtml:p>					&lt;sourceDestDir&gt;src/main/java&lt;/sourceDestDir&gt;</xhtml:p><xhtml:p>					 --&gt;</xhtml:p><xhtml:p>					&lt;verbose&gt;true&lt;/verbose&gt;</xhtml:p><xhtml:p>					&lt;xnocompile&gt;true&lt;/xnocompile&gt;</xhtml:p><xhtml:p>				&lt;/configuration&gt;</xhtml:p><xhtml:p>			&lt;/plugin&gt;</xhtml:p></html><plain>https://jax-ws-commons.java.net/jaxws-maven-plugin/

生成wsdl 和 xsd 文件
clean compile jaxws:wsgen

			&lt;plugin&gt;
				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
				&lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;
                 &lt;!--
	       		&lt;executions&gt;
	       			&lt;execution&gt;
	       				&lt;phase&gt;compile&lt;/phase&gt;
	       				&lt;goals&gt;
	       					&lt;goal&gt;wsgen&lt;/goal&gt;
	       				&lt;/goals&gt;
	       			&lt;/execution&gt;
	       		&lt;/executions&gt;
                  --&gt;
				&lt;configuration&gt;
					&lt;genWsdl&gt;true&lt;/genWsdl&gt;
					&lt;resourceDestDir&gt;src/main/resources/wsdl2&lt;/resourceDestDir&gt;
					&lt;sei&gt;com.lejingw.apps.ws2.Hello2WsService&lt;/sei&gt;
					&lt;keep&gt;true&lt;/keep&gt;
					&lt;!-- 
					&lt;sourceDestDir&gt;src/main/java&lt;/sourceDestDir&gt;
					 --&gt;
					&lt;verbose&gt;true&lt;/verbose&gt;
					&lt;xnocompile&gt;true&lt;/xnocompile&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;</plain></notes></topic><topic id="12jdvmm1fgnj4jhj5hjb16017c" timestamp="1384742685671"><title>3、或者临时发布web service，采用客户端的形式生成wsdl文件</title><notes><html><xhtml:p>public class DeployWsServerMain {</xhtml:p><xhtml:p>	public static void main(String[] args) {</xhtml:p><xhtml:p>		Endpoint.publish("http://localhost:8888/ss",new Hello2WsService());</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p>}</xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">此时需要将xsd中的内容，手工添加到wsdl的xml文件中</xhtml:span></xhtml:p></html><plain>public class DeployWsServerMain {
	public static void main(String[] args) {
		Endpoint.publish("http://localhost:8888/ss",new Hello2WsService());
	}
}
此时需要将xsd中的内容，手工添加到wsdl的xml文件中</plain></notes></topic><topic id="4nmv7f5s4pl5ns3kth0ev1u64e" timestamp="1384914009489"><title>4、在WEB-INF下创建sun-jaxws.xml文件（如无linstener，则可不要）</title><notes><html><xhtml:p>如果使用jax-ws自己来管理web service bean</xhtml:p><xhtml:p>--com.sun.xml.ws.transport.http.servlet.WSServlet</xhtml:p><xhtml:p>则sun-jaxws.xml中一定要设置内容，并和servlet中的内容对应</xhtml:p><xhtml:p>&lt;endpoint implementation="com.lejingw.apps.ws2.Hello2WsService" name="Hello" url-pattern="/Hello2Service"/&gt;</xhtml:p><xhtml:p>通过http查看xsd时，会发生xsd文件无法找到的异常</xhtml:p><xhtml:p>此时可以通过把xsd中的内容添加wsdl的xml文件中即可</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p/><xhtml:p>	&lt;servlet&gt;</xhtml:p><xhtml:p>        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;</xhtml:p><xhtml:p>        &lt;!-- &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSServlet&lt;/servlet-class&gt; --&gt;</xhtml:p><xhtml:p>        &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSSpringServlet&lt;/servlet-class&gt;</xhtml:p><xhtml:p>        &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</xhtml:p><xhtml:p>    &lt;/servlet&gt;</xhtml:p></html><plain>如果使用jax-ws自己来管理web service bean
--com.sun.xml.ws.transport.http.servlet.WSServlet
则sun-jaxws.xml中一定要设置内容，并和servlet中的内容对应
&lt;endpoint implementation="com.lejingw.apps.ws2.Hello2WsService" name="Hello" url-pattern="/Hello2Service"/&gt;
通过http查看xsd时，会发生xsd文件无法找到的异常
此时可以通过把xsd中的内容添加wsdl的xml文件中即可



	&lt;servlet&gt;
        &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;
        &lt;!-- &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSServlet&lt;/servlet-class&gt; --&gt;
        &lt;servlet-class&gt;com.sun.xml.ws.transport.http.servlet.WSSpringServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;
    &lt;/servlet&gt;</plain></notes></topic><topic branch="folded" id="7gt5ogmnr675lnlbhul3qio5em" timestamp="1384914344350"><title>5、在Spring中添加web service bean</title><notes><html><xhtml:p>&lt;beans xmlns="http://www.springframework.org/schema/beans"</xhtml:p><xhtml:p>	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ws="http://jax-ws.dev.java.net/spring/core"</xhtml:p><xhtml:p>	xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"</xhtml:p><xhtml:p>	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</xhtml:p><xhtml:p>       <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28"> http://jax-ws.dev.java.net/spring/core http://jax-ws.dev.java.net/spring/core.xsd</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">        http://jax-ws.dev.java.net/spring/servlet http://jax-ws.dev.java.net/spring/servlet.xsd</xhtml:span>"&gt;</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>    &lt;wss:binding url="/Hello2Service"&gt;</xhtml:p><xhtml:p>        &lt;wss:service&gt;</xhtml:p><xhtml:p>            &lt;ws:service bean="#hello2WsService"&gt;</xhtml:p><xhtml:p>				&lt;ws:handlers&gt;</xhtml:p><xhtml:p>					&lt;ref bean="authValidationHandler"/&gt;</xhtml:p><xhtml:p>				&lt;/ws:handlers&gt;</xhtml:p><xhtml:p>            	    &lt;ws:metadata&gt;&lt;value&gt;/WEB-INF/wsdl2/hello2.xsd&lt;/value&gt;&lt;/ws:metadata&gt;</xhtml:p><xhtml:p>            &lt;/ws:service&gt;</xhtml:p><xhtml:p>        &lt;/wss:service&gt;</xhtml:p><xhtml:p>    &lt;/wss:binding&gt;</xhtml:p><xhtml:p>    &lt;bean id="authValidationHandler" class="com.lejingw.apps.handler.AuthValidationHandler"/&gt;</xhtml:p><xhtml:p>    &lt;bean id="hello2WsService" class="com.lejingw.apps.ws2.Hello2WsService" /&gt;</xhtml:p><xhtml:p/></html><plain>&lt;beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ws="http://jax-ws.dev.java.net/spring/core"
	xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://jax-ws.dev.java.net/spring/core http://jax-ws.dev.java.net/spring/core.xsd
        http://jax-ws.dev.java.net/spring/servlet http://jax-ws.dev.java.net/spring/servlet.xsd"&gt;


    &lt;wss:binding url="/Hello2Service"&gt;
        &lt;wss:service&gt;
            &lt;ws:service bean="#hello2WsService"&gt;
				&lt;ws:handlers&gt;
					&lt;ref bean="authValidationHandler"/&gt;
				&lt;/ws:handlers&gt;
            	    &lt;ws:metadata&gt;&lt;value&gt;/WEB-INF/wsdl2/hello2.xsd&lt;/value&gt;&lt;/ws:metadata&gt;
            &lt;/ws:service&gt;
        &lt;/wss:service&gt;
    &lt;/wss:binding&gt;
    &lt;bean id="authValidationHandler" class="com.lejingw.apps.handler.AuthValidationHandler"/&gt;
    &lt;bean id="hello2WsService" class="com.lejingw.apps.ws2.Hello2WsService" /&gt;
</plain></notes><children><topics type="attached"><topic id="0fg9pp83ms0s9usc9o3nvg9vpm" timestamp="1384914328180"><title/><xhtml:img svg:height="266" svg:width="400" xhtml:src="xap:attachments/11qt8s32t10p7abklso96v2bnh.png"/></topic></topics></children></topic></topics></children></topic><topic id="1dvn124lgpnpsm4f00ums190kv" timestamp="1384494302115"><title>2、自订向下（契约优先）</title><children><topics type="attached"><topic id="2ekmm3jt4pmmpri4aglg0p2508" timestamp="1384490348756"><title>1、创建xsd文件</title></topic><topic id="5bgfsnm5s1v1kso1urnf1jt7gn" timestamp="1384914377704"><title>2、添加wsimport的maven插件，生成java类</title><notes><html><xhtml:p>clean compile jaxws:wsimport</xhtml:p><xhtml:p/><xhtml:p>			&lt;plugin&gt;</xhtml:p><xhtml:p>				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</xhtml:p><xhtml:p>	       		&lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>	       		&lt;executions&gt;</xhtml:p><xhtml:p>	       			&lt;execution&gt;</xhtml:p><xhtml:p>	       				&lt;phase&gt;compile&lt;/phase&gt;</xhtml:p><xhtml:p>	       				&lt;goals&gt;</xhtml:p><xhtml:p>	       					&lt;goal&gt;wsimport&lt;/goal&gt;</xhtml:p><xhtml:p>	       				&lt;/goals&gt;</xhtml:p><xhtml:p>	       			&lt;/execution&gt;</xhtml:p><xhtml:p>	       		&lt;/executions&gt;</xhtml:p><xhtml:p>	       		&lt;configuration&gt;</xhtml:p><xhtml:p>	       			&lt;wsdlDirectory&gt;src/main/resources/META-INF/wsdl3&lt;/wsdlDirectory&gt;</xhtml:p><xhtml:p>	       		 	&lt;wsdlFiles&gt;</xhtml:p><xhtml:p>	       		 		&lt;wsdlFile&gt;hello3.wsdl&lt;/wsdlFile&gt;</xhtml:p><xhtml:p>	       		 	&lt;/wsdlFiles&gt;</xhtml:p><xhtml:p>	       		&lt;!-- </xhtml:p><xhtml:p>	       		 	&lt;wsdlLocation&gt;http://example.com/mywebservices/*&lt;/wsdlLocation&gt;</xhtml:p><xhtml:p>	       			&lt;wsdlUrls&gt;</xhtml:p><xhtml:p>	       				&lt;wsdlUrl&gt;http://localhost:8080/lstzsb/Hello2Service?wsdl&lt;/wsdlUrl&gt;</xhtml:p><xhtml:p>	       			&lt;/wsdlUrls&gt;</xhtml:p><xhtml:p>	       			&lt;packageName&gt;com.lejingw.apps.ws3&lt;/packageName&gt;</xhtml:p><xhtml:p>	       		 --&gt;</xhtml:p><xhtml:p>	       			&lt;keep&gt;true&lt;/keep&gt;</xhtml:p><xhtml:p>	       			&lt;sourceDestDir&gt;src/main/java&lt;/sourceDestDir&gt;</xhtml:p><xhtml:p>	       			&lt;verbose&gt;true&lt;/verbose&gt;</xhtml:p><xhtml:p>	       			&lt;xnocompile&gt;true&lt;/xnocompile&gt;</xhtml:p><xhtml:p>	       		&lt;/configuration&gt;</xhtml:p><xhtml:p>			&lt;/plugin&gt;</xhtml:p></html><plain>clean compile jaxws:wsimport

			&lt;plugin&gt;
				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
	       		&lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;
	       		&lt;executions&gt;
	       			&lt;execution&gt;
	       				&lt;phase&gt;compile&lt;/phase&gt;
	       				&lt;goals&gt;
	       					&lt;goal&gt;wsimport&lt;/goal&gt;
	       				&lt;/goals&gt;
	       			&lt;/execution&gt;
	       		&lt;/executions&gt;
	       		&lt;configuration&gt;
	       			&lt;wsdlDirectory&gt;src/main/resources/META-INF/wsdl3&lt;/wsdlDirectory&gt;
	       		 	&lt;wsdlFiles&gt;
	       		 		&lt;wsdlFile&gt;hello3.wsdl&lt;/wsdlFile&gt;
	       		 	&lt;/wsdlFiles&gt;
	       		&lt;!-- 
	       		 	&lt;wsdlLocation&gt;http://example.com/mywebservices/*&lt;/wsdlLocation&gt;
	       			&lt;wsdlUrls&gt;
	       				&lt;wsdlUrl&gt;http://localhost:8080/lstzsb/Hello2Service?wsdl&lt;/wsdlUrl&gt;
	       			&lt;/wsdlUrls&gt;
	       			&lt;packageName&gt;com.lejingw.apps.ws3&lt;/packageName&gt;
	       		 --&gt;
	       			&lt;keep&gt;true&lt;/keep&gt;
	       			&lt;sourceDestDir&gt;src/main/java&lt;/sourceDestDir&gt;
	       			&lt;verbose&gt;true&lt;/verbose&gt;
	       			&lt;xnocompile&gt;true&lt;/xnocompile&gt;
	       		&lt;/configuration&gt;
			&lt;/plugin&gt;</plain></notes></topic><topic id="0p604k7d9q0vv3sth87p1e1u1d" timestamp="1384494256793"><title>3、将wsdl和xsd文件添加到WEB-INF目录下</title></topic><topic id="3kfcafpolcesf81tpk01d877p3" timestamp="1384914463788"><title>4、添加web service接口的实现类</title><children><topics type="attached"><topic id="27v92muc9p17komo86bo566h49" timestamp="1384494299363" xlink:href="xap:attachments/62k2tsn8kbuf9j8bu9p5ppl40e.java"><title>Hello3WsService.java</title></topic></topics></children><notes><html><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">注意：</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">1、wsdlLocation指向WEB-INF/wsdl31目录中的wsdl文件</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">2、除了生成的接口类外，若舍弃其他生成的类</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">则要调整接口中的各个方法上输入、输出信息转换类属性</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">即删除@RequestWrapper注释中的className属性</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">3、调整xsd中的schema根节点的elementFormDefault属性值为unqualified</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">	targetNamespace="http://ws3.apps.lejingw.com"</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">	xmlns:tns="http://ws3.apps.lejingw.com"</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">	elementFormDefault="</xhtml:span><xhtml:span style-id="34tb9e38vfpiedovdpt4dept3l">unqualified</xhtml:span><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">"&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28"/></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28"/></xhtml:p><xhtml:p>@WebService(endpointInterface="com.lejingw.apps.ws31.IHello3WsService",</xhtml:p><xhtml:p>portName="Hello3WsServicePort",</xhtml:p><xhtml:p>serviceName="Hello3WsService",</xhtml:p><xhtml:p>targetNamespace="http://ws3.apps.lejingw.com",</xhtml:p><xhtml:p>wsdlLocation="/WEB-INF/wsdl31/hello3.wsdl"</xhtml:p><xhtml:p>)</xhtml:p></html><plain>注意：
1、wsdlLocation指向WEB-INF/wsdl31目录中的wsdl文件
2、除了生成的接口类外，若舍弃其他生成的类
则要调整接口中的各个方法上输入、输出信息转换类属性
即删除@RequestWrapper注释中的className属性
3、调整xsd中的schema根节点的elementFormDefault属性值为unqualified
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://ws3.apps.lejingw.com"
	xmlns:tns="http://ws3.apps.lejingw.com"
	elementFormDefault="unqualified"&gt;


@WebService(endpointInterface="com.lejingw.apps.ws31.IHello3WsService",
portName="Hello3WsServicePort",
serviceName="Hello3WsService",
targetNamespace="http://ws3.apps.lejingw.com",
wsdlLocation="/WEB-INF/wsdl31/hello3.wsdl"
)</plain></notes></topic><topic id="5rm0qv2mkat4ddahqstem7qde9" timestamp="1384496141846"><title>5、在Spring中添加web service bean</title><notes><html><xhtml:p/><xhtml:p>    &lt;wss:binding url="/Hello3Service"&gt;</xhtml:p><xhtml:p>        &lt;wss:service&gt;</xhtml:p><xhtml:p>            &lt;ws:service bean="#hello3WsService"&gt;</xhtml:p><xhtml:p>            	&lt;ws:metadata&gt;&lt;value&gt;/WEB-INF/wsdl31/hello3.xsd&lt;/value&gt;&lt;/ws:metadata&gt;</xhtml:p><xhtml:p>            &lt;/ws:service&gt;</xhtml:p><xhtml:p>        &lt;/wss:service&gt;</xhtml:p><xhtml:p>    &lt;/wss:binding&gt;</xhtml:p><xhtml:p/><xhtml:p>    &lt;bean id="hello3WsService" class="com.lejingw.apps.ws31.Hello3WsService" /&gt;</xhtml:p></html><plain>
    &lt;wss:binding url="/Hello3Service"&gt;
        &lt;wss:service&gt;
            &lt;ws:service bean="#hello3WsService"&gt;
            	&lt;ws:metadata&gt;&lt;value&gt;/WEB-INF/wsdl31/hello3.xsd&lt;/value&gt;&lt;/ws:metadata&gt;
            &lt;/ws:service&gt;
        &lt;/wss:service&gt;
    &lt;/wss:binding&gt;

    &lt;bean id="hello3WsService" class="com.lejingw.apps.ws31.Hello3WsService" /&gt;</plain></notes></topic></topics></children></topic><topic id="7m0es075gc5vp2q7ev4f8imuhd" timestamp="1384495233570"><title>3、客户端使用web service</title><children><topics type="attached"><topic id="0ink7uhe4e8fump3mf9madms5q" timestamp="1384914475972"><title>1、客户端应用添加wsimport的maven插件，生成web service 源代码</title><notes><html><xhtml:p/><xhtml:p>			&lt;plugin&gt;</xhtml:p><xhtml:p>				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</xhtml:p><xhtml:p>	       		&lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>	       		&lt;executions&gt;</xhtml:p><xhtml:p>	       			&lt;execution&gt;</xhtml:p><xhtml:p>	       				&lt;phase&gt;compile&lt;/phase&gt;</xhtml:p><xhtml:p>	       				&lt;goals&gt;</xhtml:p><xhtml:p>	       					&lt;goal&gt;wsimport&lt;/goal&gt;</xhtml:p><xhtml:p>	       				&lt;/goals&gt;</xhtml:p><xhtml:p>	       			&lt;/execution&gt;</xhtml:p><xhtml:p>	       		&lt;/executions&gt;</xhtml:p><xhtml:p>	       		&lt;configuration&gt;</xhtml:p><xhtml:p>	       		&lt;!-- </xhtml:p><xhtml:p>	       			&lt;wsdlDirectory&gt;src/resources/META-INF/wsdl2&lt;/wsdlDirectory&gt;</xhtml:p><xhtml:p>	       		 	&lt;wsdlFiles&gt;</xhtml:p><xhtml:p>	       		 		&lt;wsdlFile&gt;hell2.wsdl&lt;/wsdlFile&gt;</xhtml:p><xhtml:p>	       		 		&lt;wsdlFile&gt;${basedir}/src/mywsdls/c.wsdl&lt;/wsdlFile&gt;</xhtml:p><xhtml:p>	       		 	&lt;/wsdlFiles&gt;</xhtml:p><xhtml:p>	       		 	&lt;wsdlLocation&gt;http://example.com/mywebservices/*&lt;/wsdlLocation&gt;</xhtml:p><xhtml:p>	       		 --&gt;</xhtml:p><xhtml:p>	       			&lt;wsdlUrls&gt;</xhtml:p><xhtml:p>	       				&lt;wsdlUrl&gt;http://localhost:8080/lstzsb/Hello2Service?wsdl&lt;/wsdlUrl&gt;</xhtml:p><xhtml:p>	       			&lt;/wsdlUrls&gt;</xhtml:p><xhtml:p>	       			&lt;keep&gt;true&lt;/keep&gt;</xhtml:p><xhtml:p>	       			&lt;sourceDestDir&gt;src/main/java&lt;/sourceDestDir&gt;</xhtml:p><xhtml:p>	       			&lt;packageName&gt;com.lejingw.apps.ws3&lt;/packageName&gt;</xhtml:p><xhtml:p>	       			&lt;verbose&gt;true&lt;/verbose&gt;</xhtml:p><xhtml:p>	       			&lt;xnocompile&gt;true&lt;/xnocompile&gt;</xhtml:p><xhtml:p>	       		&lt;/configuration&gt;</xhtml:p><xhtml:p>			&lt;/plugin&gt;</xhtml:p></html><plain>
			&lt;plugin&gt;
				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
	       		&lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;
	       		&lt;executions&gt;
	       			&lt;execution&gt;
	       				&lt;phase&gt;compile&lt;/phase&gt;
	       				&lt;goals&gt;
	       					&lt;goal&gt;wsimport&lt;/goal&gt;
	       				&lt;/goals&gt;
	       			&lt;/execution&gt;
	       		&lt;/executions&gt;
	       		&lt;configuration&gt;
	       		&lt;!-- 
	       			&lt;wsdlDirectory&gt;src/resources/META-INF/wsdl2&lt;/wsdlDirectory&gt;
	       		 	&lt;wsdlFiles&gt;
	       		 		&lt;wsdlFile&gt;hell2.wsdl&lt;/wsdlFile&gt;
	       		 		&lt;wsdlFile&gt;${basedir}/src/mywsdls/c.wsdl&lt;/wsdlFile&gt;
	       		 	&lt;/wsdlFiles&gt;
	       		 	&lt;wsdlLocation&gt;http://example.com/mywebservices/*&lt;/wsdlLocation&gt;
	       		 --&gt;
	       			&lt;wsdlUrls&gt;
	       				&lt;wsdlUrl&gt;http://localhost:8080/lstzsb/Hello2Service?wsdl&lt;/wsdlUrl&gt;
	       			&lt;/wsdlUrls&gt;
	       			&lt;keep&gt;true&lt;/keep&gt;
	       			&lt;sourceDestDir&gt;src/main/java&lt;/sourceDestDir&gt;
	       			&lt;packageName&gt;com.lejingw.apps.ws3&lt;/packageName&gt;
	       			&lt;verbose&gt;true&lt;/verbose&gt;
	       			&lt;xnocompile&gt;true&lt;/xnocompile&gt;
	       		&lt;/configuration&gt;
			&lt;/plugin&gt;</plain></notes></topic><topic id="3cn6p1153gt6bjd5bcrm9k2i5a" timestamp="1384495242299"><title>2、编写测试文件测试web service是否可以调用成功</title><notes><html><xhtml:p>package com.lejingw.apps.ws3.test;</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>import com.lejingw.apps.ws3.Hello2WsService;</xhtml:p><xhtml:p>import com.lejingw.apps.ws3.Hello2WsService_Service;</xhtml:p><xhtml:p>import com.lejingw.apps.ws3.Pager;</xhtml:p><xhtml:p/><xhtml:p>public class Test3 {</xhtml:p><xhtml:p>	@org.junit.Test</xhtml:p><xhtml:p>	public void test01(){</xhtml:p><xhtml:p>		Hello2WsService service = new Hello2WsService_Service().getHello2WsServicePort();</xhtml:p><xhtml:p>		System.out.println(service.sayHello("world"));</xhtml:p><xhtml:p>		Pager pager = service.getPager(1, 10);</xhtml:p><xhtml:p>		System.out.println(pager.getStart()+":"+pager.getLimit());</xhtml:p><xhtml:p>		System.out.println(service.getPagerList(pager));</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p>}</xhtml:p><xhtml:p/></html><plain>package com.lejingw.apps.ws3.test;


import com.lejingw.apps.ws3.Hello2WsService;
import com.lejingw.apps.ws3.Hello2WsService_Service;
import com.lejingw.apps.ws3.Pager;

public class Test3 {
	@org.junit.Test
	public void test01(){
		Hello2WsService service = new Hello2WsService_Service().getHello2WsServicePort();
		System.out.println(service.sayHello("world"));
		Pager pager = service.getPager(1, 10);
		System.out.println(pager.getStart()+":"+pager.getLimit());
		System.out.println(service.getPagerList(pager));
	}
}
</plain></notes></topic><topic id="6q8nnap8i5m3kjlea45dpa3qfl" timestamp="1384914567310"><title>3、在client中用spring管理web service ben</title><notes><html><xhtml:p/><xhtml:p>	&lt;!-- 使用spring来注入一个ws的client --&gt;</xhtml:p><xhtml:p>	&lt;bean id="hello2WsService" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"&gt;</xhtml:p><xhtml:p>	    &lt;property name="serviceInterface" value="com.lejingw.apps.ws3.Hello2WsService"/&gt;</xhtml:p><xhtml:p>	    &lt;property name="wsdlDocumentUrl" value="http://localhost:8080/lstzsb/Hello2Service?wsdl"/&gt;</xhtml:p><xhtml:p>	    &lt;property name="namespaceUri" value="http://ws2.apps.lejingw.com"/&gt;</xhtml:p><xhtml:p>	    &lt;property name="serviceName" value="Hello2WsService"/&gt;</xhtml:p><xhtml:p>	    &lt;property name="portName" value="Hello2WsServicePort"/&gt;</xhtml:p><xhtml:p>        &lt;property name="handlerResolver" ref="mySOAPHandlerResolver"/&gt;</xhtml:p><xhtml:p>	&lt;/bean&gt;</xhtml:p><xhtml:p/><xhtml:p>MySOAPHandlerResolver.java</xhtml:p><xhtml:p/><xhtml:p>import java.util.ArrayList;</xhtml:p><xhtml:p>import java.util.List;</xhtml:p><xhtml:p/><xhtml:p>import javax.xml.ws.handler.Handler;</xhtml:p><xhtml:p>import javax.xml.ws.handler.HandlerResolver;</xhtml:p><xhtml:p>import javax.xml.ws.handler.PortInfo;</xhtml:p><xhtml:p/><xhtml:p>import org.springframework.stereotype.Service;</xhtml:p><xhtml:p/><xhtml:p>@Service("mySOAPHandlerResolver")</xhtml:p><xhtml:p>@SuppressWarnings("rawtypes")</xhtml:p><xhtml:p>public class MySOAPHandlerResolver implements HandlerResolver {</xhtml:p><xhtml:p>	private List&lt;Handler&gt; handlerList;</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>	public MySOAPHandlerResolver(){</xhtml:p><xhtml:p>		handlerList = new ArrayList&lt;Handler&gt;();</xhtml:p><xhtml:p>		handlerList.add(new LicenseInfoHandler());</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>	@Override</xhtml:p><xhtml:p>	public List&lt;Handler&gt; getHandlerChain(PortInfo portInfo) {</xhtml:p><xhtml:p>		return handlerList;</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>}</xhtml:p><xhtml:p/></html><plain>
	&lt;!-- 使用spring来注入一个ws的client --&gt;
	&lt;bean id="hello2WsService" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"&gt;
	    &lt;property name="serviceInterface" value="com.lejingw.apps.ws3.Hello2WsService"/&gt;
	    &lt;property name="wsdlDocumentUrl" value="http://localhost:8080/lstzsb/Hello2Service?wsdl"/&gt;
	    &lt;property name="namespaceUri" value="http://ws2.apps.lejingw.com"/&gt;
	    &lt;property name="serviceName" value="Hello2WsService"/&gt;
	    &lt;property name="portName" value="Hello2WsServicePort"/&gt;
        &lt;property name="handlerResolver" ref="mySOAPHandlerResolver"/&gt;
	&lt;/bean&gt;

MySOAPHandlerResolver.java

import java.util.ArrayList;
import java.util.List;

import javax.xml.ws.handler.Handler;
import javax.xml.ws.handler.HandlerResolver;
import javax.xml.ws.handler.PortInfo;

import org.springframework.stereotype.Service;

@Service("mySOAPHandlerResolver")
@SuppressWarnings("rawtypes")
public class MySOAPHandlerResolver implements HandlerResolver {
	private List&lt;Handler&gt; handlerList;
	
	public MySOAPHandlerResolver(){
		handlerList = new ArrayList&lt;Handler&gt;();
		handlerList.add(new LicenseInfoHandler());
	}

	@Override
	public List&lt;Handler&gt; getHandlerChain(PortInfo portInfo) {
		return handlerList;
	}

}
</plain></notes></topic></topics></children></topic><topic id="196bf1ngteoi699e8dvbj0f8ng" timestamp="1384749860810"><title>4、web service客户端异步调用</title><children><topics type="attached"><topic id="5ve284ekb1i586cafnn8rsc20a" timestamp="1384744914566"><title>1、添加binding.xml配置文件</title><notes><html><xhtml:p/><xhtml:p/><xhtml:p>					&lt;bindingDirectory&gt;src/main/resources/META-INF/wsdl3&lt;/bindingDirectory&gt;</xhtml:p><xhtml:p>					&lt;bindingFiles&gt;</xhtml:p><xhtml:p>						&lt;bindingFile&gt;binding.xml&lt;/bindingFile&gt;</xhtml:p><xhtml:p>					&lt;/bindingFiles&gt;</xhtml:p></html><plain>

					&lt;bindingDirectory&gt;src/main/resources/META-INF/wsdl3&lt;/bindingDirectory&gt;
					&lt;bindingFiles&gt;
						&lt;bindingFile&gt;binding.xml&lt;/bindingFile&gt;
					&lt;/bindingFiles&gt;</plain></notes></topic><topic id="4jq6uj5nouu48halqnutvmvlcp" timestamp="1384744931612"><title>2、修改wsimport的maven插件配置参数</title><notes><html><xhtml:p/><xhtml:p>			&lt;plugin&gt;</xhtml:p><xhtml:p>				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</xhtml:p><xhtml:p>	       		&lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;</xhtml:p><xhtml:p>	       		&lt;!-- </xhtml:p><xhtml:p>	       		&lt;executions&gt;</xhtml:p><xhtml:p>	       			&lt;execution&gt;</xhtml:p><xhtml:p>	       				&lt;phase&gt;compile&lt;/phase&gt;</xhtml:p><xhtml:p>	       				&lt;goals&gt;</xhtml:p><xhtml:p>	       					&lt;goal&gt;wsimport&lt;/goal&gt;</xhtml:p><xhtml:p>	       				&lt;/goals&gt;</xhtml:p><xhtml:p>	       			&lt;/execution&gt;</xhtml:p><xhtml:p>	       		&lt;/executions&gt;</xhtml:p><xhtml:p>	       		--&gt;</xhtml:p><xhtml:p>	       		&lt;configuration&gt;</xhtml:p><xhtml:p>	       			&lt;wsdlUrls&gt;</xhtml:p><xhtml:p>	       				&lt;wsdlUrl&gt;http://localhost:8080/lstzsb/Hello2Service?wsdl&lt;/wsdlUrl&gt;</xhtml:p><xhtml:p>	       			&lt;/wsdlUrls&gt;</xhtml:p><xhtml:p>	       			&lt;keep&gt;true&lt;/keep&gt;</xhtml:p><xhtml:p>	       			&lt;verbose&gt;true&lt;/verbose&gt;</xhtml:p><xhtml:p>	       			&lt;xnocompile&gt;true&lt;/xnocompile&gt;</xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">					&lt;bindingDirectory&gt;src/main/resources/META-INF/wsdl3&lt;/bindingDirectory&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">					&lt;bindingFiles&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">						&lt;bindingFile&gt;binding.xml&lt;/bindingFile&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">					&lt;/bindingFiles&gt;</xhtml:span></xhtml:p><xhtml:p>	       		&lt;/configuration&gt;</xhtml:p><xhtml:p>			&lt;/plugin&gt;</xhtml:p><xhtml:p/><xhtml:p>如果使用jdk自带的wsimport工具</xhtml:p><xhtml:p>wsimport -keep <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">–b binding.xml</xhtml:span>  -d bin -s src wsdl/HelloService.wsdl</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>我们把HelloService文件打开，可以看到两行：</xhtml:p><xhtml:p>file:/D:/workspace/JaxWSClient/wsdl/HelloService.wsdl</xhtml:p><xhtml:p>把它们改成：</xhtml:p><xhtml:p>http://localhost:9090/JaxWSSample/HelloService?wsdl</xhtml:p><xhtml:p>有两行，尤其是Url url=这一行，千万不要漏改了。</xhtml:p></html><plain>
			&lt;plugin&gt;
				&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
	       		&lt;artifactId&gt;jaxws-maven-plugin&lt;/artifactId&gt;
	       		&lt;!-- 
	       		&lt;executions&gt;
	       			&lt;execution&gt;
	       				&lt;phase&gt;compile&lt;/phase&gt;
	       				&lt;goals&gt;
	       					&lt;goal&gt;wsimport&lt;/goal&gt;
	       				&lt;/goals&gt;
	       			&lt;/execution&gt;
	       		&lt;/executions&gt;
	       		--&gt;
	       		&lt;configuration&gt;
	       			&lt;wsdlUrls&gt;
	       				&lt;wsdlUrl&gt;http://localhost:8080/lstzsb/Hello2Service?wsdl&lt;/wsdlUrl&gt;
	       			&lt;/wsdlUrls&gt;
	       			&lt;keep&gt;true&lt;/keep&gt;
	       			&lt;verbose&gt;true&lt;/verbose&gt;
	       			&lt;xnocompile&gt;true&lt;/xnocompile&gt;
					&lt;bindingDirectory&gt;src/main/resources/META-INF/wsdl3&lt;/bindingDirectory&gt;
					&lt;bindingFiles&gt;
						&lt;bindingFile&gt;binding.xml&lt;/bindingFile&gt;
					&lt;/bindingFiles&gt;
	       		&lt;/configuration&gt;
			&lt;/plugin&gt;

如果使用jdk自带的wsimport工具
wsimport -keep –b binding.xml  -d bin -s src wsdl/HelloService.wsdl


我们把HelloService文件打开，可以看到两行：
file:/D:/workspace/JaxWSClient/wsdl/HelloService.wsdl
把它们改成：
http://localhost:9090/JaxWSSample/HelloService?wsdl
有两行，尤其是Url url=这一行，千万不要漏改了。</plain></notes></topic><topic id="5tmqf7o58cvk6ikt997band1ub" timestamp="1384749958202"><title>3、测试异步调用</title><notes><html><xhtml:p/><xhtml:p>	private Hello2WsService service;</xhtml:p><xhtml:p>	@Before</xhtml:p><xhtml:p>	public void init(){</xhtml:p><xhtml:p>		service = new Hello2WsService_Service().getHello2WsServicePort();</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>	@org.junit.Test</xhtml:p><xhtml:p>	public void test01(){</xhtml:p><xhtml:p>		System.out.println(service.sayHello("world"));</xhtml:p><xhtml:p>		Response&lt;SayHelloResponse&gt; sayAsync = service.sayHelloAsync("Mk");</xhtml:p><xhtml:p>        while (!sayAsync.isDone()) {</xhtml:p><xhtml:p>            System.out.println("is not down");</xhtml:p><xhtml:p>        }</xhtml:p><xhtml:p>        try {</xhtml:p><xhtml:p>        	SayHelloResponse callNameResponse = sayAsync.get();</xhtml:p><xhtml:p>            String message = callNameResponse.getReturn();</xhtml:p><xhtml:p>            System.out.println(message);</xhtml:p><xhtml:p>        } catch (Exception ex) {</xhtml:p><xhtml:p>        }</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>    @Test</xhtml:p><xhtml:p>	public void test02(){</xhtml:p><xhtml:p>		service.sayHelloAsync("Mk", new AsyncHandler&lt;SayHelloResponse&gt;() {</xhtml:p><xhtml:p>            public void handleResponse(Response&lt;SayHelloResponse&gt; res) {</xhtml:p><xhtml:p>                try {</xhtml:p><xhtml:p>                    SayHelloResponse response = res.get();</xhtml:p><xhtml:p>                    String message = response.getReturn();</xhtml:p><xhtml:p>                    System.out.println(message);</xhtml:p><xhtml:p>                } catch (Exception e) {</xhtml:p><xhtml:p>                    e.printStackTrace();</xhtml:p><xhtml:p>                }</xhtml:p><xhtml:p>            }</xhtml:p><xhtml:p>        });</xhtml:p><xhtml:p>        try {</xhtml:p><xhtml:p>			Thread.sleep(10000);</xhtml:p><xhtml:p>		} catch (InterruptedException e) {</xhtml:p><xhtml:p>			e.printStackTrace();</xhtml:p><xhtml:p>		}</xhtml:p><xhtml:p>	}</xhtml:p></html><plain>
	private Hello2WsService service;
	@Before
	public void init(){
		service = new Hello2WsService_Service().getHello2WsServicePort();
	}

	@org.junit.Test
	public void test01(){
		System.out.println(service.sayHello("world"));
		Response&lt;SayHelloResponse&gt; sayAsync = service.sayHelloAsync("Mk");
        while (!sayAsync.isDone()) {
            System.out.println("is not down");
        }
        try {
        	SayHelloResponse callNameResponse = sayAsync.get();
            String message = callNameResponse.getReturn();
            System.out.println(message);
        } catch (Exception ex) {
        }
	}


    @Test
	public void test02(){
		service.sayHelloAsync("Mk", new AsyncHandler&lt;SayHelloResponse&gt;() {
            public void handleResponse(Response&lt;SayHelloResponse&gt; res) {
                try {
                    SayHelloResponse response = res.get();
                    String message = response.getReturn();
                    System.out.println(message);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}</plain></notes></topic></topics></children></topic><topic id="29gbg934ca623hq0fpdk3bremi" timestamp="1384842349445"><title>5、其他内容</title><children><topics type="attached"><topic id="7pvb1dgch5d4fq4n5a8mfiu571" timestamp="1384828697352"><title>1、增加header的处理</title><children><topics type="attached"><topic id="2lvd468hjarqr4rsekcb00siag" timestamp="1384825718994"><title>1、修改wsdl文件</title><notes><html><xhtml:p>1、添加xsd:element</xhtml:p><xhtml:p>&lt;xsd:element name="licenseInfo" type="xsd:string"/&gt;</xhtml:p><xhtml:p/><xhtml:p>2、添加message</xhtml:p><xhtml:p>  &lt;wsdl:message name="licenseInfo"&gt;</xhtml:p><xhtml:p>  	&lt;wsdl:part name="licenseInfo" element="tns:licenseInfo"/&gt;</xhtml:p><xhtml:p>  &lt;/wsdl:message&gt;</xhtml:p><xhtml:p/><xhtml:p>3、在binding中的对应operation的input中添加输入参数</xhtml:p><xhtml:p>  &lt;wsdl:binding name="hello3WsSOAP" type="tns:IHello3WsService"&gt;</xhtml:p><xhtml:p>    &lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;</xhtml:p><xhtml:p>    &lt;wsdl:operation name="sayHello"&gt;</xhtml:p><xhtml:p>      &lt;wsdl:input&gt;</xhtml:p><xhtml:p>        &lt;soap:body use="literal"/&gt;</xhtml:p><xhtml:p>        &lt;soap:header use="literal" part="licenseInfo" message="tns:licenseInfo"/&gt;</xhtml:p><xhtml:p>      &lt;/wsdl:input&gt;</xhtml:p><xhtml:p>      &lt;wsdl:output&gt;</xhtml:p><xhtml:p>        &lt;soap:body use="literal"/&gt;</xhtml:p><xhtml:p>      &lt;/wsdl:output&gt;</xhtml:p><xhtml:p>    &lt;/wsdl:operation&gt;</xhtml:p><xhtml:p>  &lt;/wsdl:binding&gt;</xhtml:p></html><plain>1、添加xsd:element
&lt;xsd:element name="licenseInfo" type="xsd:string"/&gt;

2、添加message
  &lt;wsdl:message name="licenseInfo"&gt;
  	&lt;wsdl:part name="licenseInfo" element="tns:licenseInfo"/&gt;
  &lt;/wsdl:message&gt;

3、在binding中的对应operation的input中添加输入参数
  &lt;wsdl:binding name="hello3WsSOAP" type="tns:IHello3WsService"&gt;
    &lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;
    &lt;wsdl:operation name="sayHello"&gt;
      &lt;wsdl:input&gt;
        &lt;soap:body use="literal"/&gt;
        &lt;soap:header use="literal" part="licenseInfo" message="tns:licenseInfo"/&gt;
      &lt;/wsdl:input&gt;
      &lt;wsdl:output&gt;
        &lt;soap:body use="literal"/&gt;
      &lt;/wsdl:output&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:binding&gt;</plain></notes></topic><topic id="5m0s150ckrpfkln6bd22vaqfkb" timestamp="1384825884196"><title>2、修改根据wsdl生成的java接口文件</title><notes><html><xhtml:p>添加 header内容作为方法的传入参数</xhtml:p><xhtml:p/><xhtml:p>   /**</xhtml:p><xhtml:p>     * </xhtml:p><xhtml:p>     * @param name</xhtml:p><xhtml:p>     * @return</xhtml:p><xhtml:p>     *     returns java.lang.String</xhtml:p><xhtml:p>     */</xhtml:p><xhtml:p>    @WebMethod</xhtml:p><xhtml:p>    @WebResult(name = "str", targetNamespace = "")</xhtml:p><xhtml:p>    @RequestWrapper(localName = "sayHello", targetNamespace = "http://ws3.apps.lejingw.com")</xhtml:p><xhtml:p>    @ResponseWrapper(localName = "sayHelloResponse", targetNamespace = "http://ws3.apps.lejingw.com")</xhtml:p><xhtml:p>    public String sayHello(</xhtml:p><xhtml:p>        @WebParam(name = "name", targetNamespace = "")</xhtml:p><xhtml:p>        String name<xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">, @WebParam(name="licenseInfo", header=true) String licenseInfo</xhtml:span>);</xhtml:p></html><plain>添加 header内容作为方法的传入参数

   /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(name = "str", targetNamespace = "")
    @RequestWrapper(localName = "sayHello", targetNamespace = "http://ws3.apps.lejingw.com")
    @ResponseWrapper(localName = "sayHelloResponse", targetNamespace = "http://ws3.apps.lejingw.com")
    public String sayHello(
        @WebParam(name = "name", targetNamespace = "")
        String name, @WebParam(name="licenseInfo", header=true) String licenseInfo);</plain></notes></topic><topic id="3ombrid91420727g7h5v3g4bgp" timestamp="1384825900284"><title>3、修改接口实现类</title></topic><topic id="64mabjn80qdtl4f5dac23drm66" timestamp="1384825965613"><title>4、根据wsdl重新生成client的java文件</title></topic><topic id="2jpb6p998esuhkh12fb8btto11" timestamp="1384826620862"><title>5、创建SOAPHandler</title><notes><html><xhtml:p>import java.util.Set;</xhtml:p><xhtml:p/><xhtml:p>import javax.xml.namespace.QName;</xhtml:p><xhtml:p>import javax.xml.soap.SOAPEnvelope;</xhtml:p><xhtml:p>import javax.xml.soap.SOAPException;</xhtml:p><xhtml:p>import javax.xml.soap.SOAPHeader;</xhtml:p><xhtml:p>import javax.xml.ws.handler.MessageContext;</xhtml:p><xhtml:p>import javax.xml.ws.handler.soap.SOAPHandler;</xhtml:p><xhtml:p>import javax.xml.ws.handler.soap.SOAPMessageContext;</xhtml:p><xhtml:p/><xhtml:p>public class LicenseInfoHandler implements <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">SOAPHandler</xhtml:span>&lt;<xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">SOAPMessageContext</xhtml:span>&gt;{</xhtml:p><xhtml:p/><xhtml:p>	@Override</xhtml:p><xhtml:p>	public void close(MessageContext arg0) {</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>	@Override</xhtml:p><xhtml:p>	public boolean handleFault(SOAPMessageContext arg0) {</xhtml:p><xhtml:p>		return false;</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>	@Override</xhtml:p><xhtml:p>	public boolean handleMessage(SOAPMessageContext ctx) {</xhtml:p><xhtml:p>		try {</xhtml:p><xhtml:p>			Boolean out = (Boolean)ctx.get(SOAPMessageContext.MESSAGE_OUTBOUND_PROPERTY);</xhtml:p><xhtml:p>			System.out.println("----"+out);</xhtml:p><xhtml:p>			if(out){</xhtml:p><xhtml:p>				SOAPEnvelope enve = ctx.getMessage().getSOAPPart().getEnvelope();</xhtml:p><xhtml:p>				SOAPHeader header = enve.getHeader();</xhtml:p><xhtml:p>				if(null == header) header = enve.addHeader();</xhtml:p><xhtml:p>				QName qname = new QName("http://ws3.apps.lejingw.com", "licenseInfo", "ns");</xhtml:p><xhtml:p>				header.addHeaderElement(qname).setValue("111322sssss1");</xhtml:p><xhtml:p>			}</xhtml:p><xhtml:p>			return true;</xhtml:p><xhtml:p>		} catch (SOAPException e) {</xhtml:p><xhtml:p>			e.printStackTrace();</xhtml:p><xhtml:p>		}</xhtml:p><xhtml:p>		return false;</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>	@Override</xhtml:p><xhtml:p>	public Set&lt;QName&gt; getHeaders() {</xhtml:p><xhtml:p>		return null;</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>}</xhtml:p></html><plain>import java.util.Set;

import javax.xml.namespace.QName;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPHeader;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;

public class LicenseInfoHandler implements SOAPHandler&lt;SOAPMessageContext&gt;{

	@Override
	public void close(MessageContext arg0) {
	}

	@Override
	public boolean handleFault(SOAPMessageContext arg0) {
		return false;
	}

	@Override
	public boolean handleMessage(SOAPMessageContext ctx) {
		try {
			Boolean out = (Boolean)ctx.get(SOAPMessageContext.MESSAGE_OUTBOUND_PROPERTY);
			System.out.println("----"+out);
			if(out){
				SOAPEnvelope enve = ctx.getMessage().getSOAPPart().getEnvelope();
				SOAPHeader header = enve.getHeader();
				if(null == header) header = enve.addHeader();
				QName qname = new QName("http://ws3.apps.lejingw.com", "licenseInfo", "ns");
				header.addHeaderElement(qname).setValue("111322sssss1");
			}
			return true;
		} catch (SOAPException e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public Set&lt;QName&gt; getHeaders() {
		return null;
	}

}</plain></notes><children><topics type="attached"><topic id="7jibhjfcg6560ctoscca4dr44h" timestamp="1384826752559"><title>Qname的使用</title><notes><html><xhtml:p>QName qname = new QName("http://aa", "bb", "cc");</xhtml:p><xhtml:p/><xhtml:p>&lt;cc:bb xmlns:cc="http://aa"/&gt;</xhtml:p><xhtml:p/><xhtml:p>public QName(String namespaceURI, String localPart, String prefix)</xhtml:p><xhtml:p/><xhtml:p>Parameters:</xhtml:p><xhtml:p>namespaceURI - Namespace URI of the QName</xhtml:p><xhtml:p>localPart - local part of the QName</xhtml:p><xhtml:p>prefix - prefix of the QName</xhtml:p></html><plain>QName qname = new QName("http://aa", "bb", "cc");

&lt;cc:bb xmlns:cc="http://aa"/&gt;

public QName(String namespaceURI, String localPart, String prefix)

Parameters:
namespaceURI - Namespace URI of the QName
localPart - local part of the QName
prefix - prefix of the QName</plain></notes></topic></topics></children></topic><topic id="75qgei3ag6tgsuld6icvopp2b4" timestamp="1384826432551"><title>6、创建handler的配置文件</title><notes><html><xhtml:p>1、handler.xml放置于resources根目录下</xhtml:p><xhtml:p/><xhtml:p>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</xhtml:p><xhtml:p>&lt;handler-chains xmlns="http://java.sun.com/xml/ns/javaee"&gt;</xhtml:p><xhtml:p>    &lt;handler-chain&gt;</xhtml:p><xhtml:p>       &lt;handler&gt;</xhtml:p><xhtml:p>           &lt;handler-name&gt;licenseInfoHandler&lt;/handler-name&gt;</xhtml:p><xhtml:p>           &lt;handler-class&gt;com.lejingw.apps.handler.LicenseInfoHandler&lt;/handler-class&gt;</xhtml:p><xhtml:p>       &lt;/handler&gt;</xhtml:p><xhtml:p>    &lt;/handler-chain&gt;</xhtml:p><xhtml:p>&lt;/handler-chains&gt;</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>2、在根据wsdl自动生成的web service SEI实现类中添加HandlerChain注释</xhtml:p><xhtml:p>方便测试</xhtml:p><xhtml:p>/**</xhtml:p><xhtml:p> * This class was generated by the JAX-WS RI.</xhtml:p><xhtml:p> * JAX-WS RI 2.1.3-b02-</xhtml:p><xhtml:p> * Generated source version: 2.1</xhtml:p><xhtml:p> * </xhtml:p><xhtml:p> */</xhtml:p><xhtml:p>@WebServiceClient(name = "Hello3WsService", targetNamespace = "http://ws3.apps.lejingw.com", wsdlLocation = "http://localhost:8080/lstzsb/Hello3Service?wsdl")</xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">@HandlerChain(file="handlers.xml")</xhtml:span></xhtml:p><xhtml:p>public class Hello3WsService</xhtml:p><xhtml:p>    extends Service</xhtml:p></html><plain>1、handler.xml放置于resources根目录下

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;handler-chains xmlns="http://java.sun.com/xml/ns/javaee"&gt;
    &lt;handler-chain&gt;
       &lt;handler&gt;
           &lt;handler-name&gt;licenseInfoHandler&lt;/handler-name&gt;
           &lt;handler-class&gt;com.lejingw.apps.handler.LicenseInfoHandler&lt;/handler-class&gt;
       &lt;/handler&gt;
    &lt;/handler-chain&gt;
&lt;/handler-chains&gt;


2、在根据wsdl自动生成的web service SEI实现类中添加HandlerChain注释
方便测试
/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.3-b02-
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "Hello3WsService", targetNamespace = "http://ws3.apps.lejingw.com", wsdlLocation = "http://localhost:8080/lstzsb/Hello3Service?wsdl")
@HandlerChain(file="handlers.xml")
public class Hello3WsService
    extends Service</plain></notes></topic></topics></children></topic><topic id="22fijm7rkfnvml2h1n41bcbno9" timestamp="1384842326624"><title>2、添加异常</title><children><topics type="attached"><topic id="1sb70405itq62geaiqi23ib0sn" timestamp="1384828732407"><title>1、创建web service Exception</title></topic><topic id="648l5k47neap5l1qh9sle6p7ac" timestamp="1384828752375"><title>2、修改接口和实现类，添加异常处理</title></topic><topic id="70n5tmtpoqaad3b301cno3l60t" timestamp="1384829554532"><title>3、修改wsdl</title><notes><html><xhtml:p>1、添加xsd:element</xhtml:p><xhtml:p>    <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">&lt;xsd:element name="Hello3WsException" type="tns:Hello3WsException"/&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">    	&lt;xsd:complexType name="Hello3WsException"&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">    		&lt;xsd:sequence&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">    			&lt;xsd:element name="message" type="xsd:string"/&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">    		&lt;/xsd:sequence&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">    	&lt;/xsd:complexType&gt;</xhtml:span></xhtml:p><xhtml:p/><xhtml:p>2、添加wsdl:message</xhtml:p><xhtml:p>  <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">&lt;wsdl:message name="Hello3WsException"&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">  	&lt;wsdl:part name="fault" element="tns:Hello3WsException"/&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">  &lt;/wsdl:message&gt;</xhtml:span></xhtml:p><xhtml:p/><xhtml:p>3、添加portType</xhtml:p><xhtml:p>  &lt;wsdl:portType name="IHello3WsService"&gt;</xhtml:p><xhtml:p>    &lt;wsdl:operation name="sayHello"&gt;</xhtml:p><xhtml:p>      &lt;wsdl:input message="tns:sayHello"/&gt;</xhtml:p><xhtml:p>      &lt;wsdl:output message="tns:sayHelloResponse"/&gt;</xhtml:p><xhtml:p>      <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">&lt;wsdl:fault name="Hello3WsException" message="tns:Hello3WsException"/&gt;</xhtml:span></xhtml:p><xhtml:p>    &lt;/wsdl:operation&gt;</xhtml:p><xhtml:p>  &lt;/wsdl:portType&gt;</xhtml:p><xhtml:p/><xhtml:p>4、添加binding</xhtml:p><xhtml:p>  &lt;wsdl:binding name="hello3WsSOAP" type="tns:IHello3WsService"&gt;</xhtml:p><xhtml:p>    &lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;</xhtml:p><xhtml:p>    &lt;wsdl:operation name="sayHello"&gt;</xhtml:p><xhtml:p>      &lt;wsdl:input&gt;</xhtml:p><xhtml:p>        &lt;soap:body use="literal"/&gt;</xhtml:p><xhtml:p>        &lt;soap:header use="literal" part="licenseInfo" message="tns:licenseInfo"/&gt;</xhtml:p><xhtml:p>      &lt;/wsdl:input&gt;</xhtml:p><xhtml:p>      &lt;wsdl:output&gt;</xhtml:p><xhtml:p>        &lt;soap:body use="literal"/&gt;</xhtml:p><xhtml:p>      &lt;/wsdl:output&gt;</xhtml:p><xhtml:p>      <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">&lt;wsdl:fault name="Hello3WsException"&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">      	&lt;soap:fault name="Hello3WsException" use="literal"/&gt;</xhtml:span></xhtml:p><xhtml:p><xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">      &lt;/wsdl:fault&gt;</xhtml:span></xhtml:p><xhtml:p>    &lt;/wsdl:operation&gt;</xhtml:p><xhtml:p>  &lt;/wsdl:binding&gt;</xhtml:p></html><plain>1、添加xsd:element
    &lt;xsd:element name="Hello3WsException" type="tns:Hello3WsException"/&gt;
    	&lt;xsd:complexType name="Hello3WsException"&gt;
    		&lt;xsd:sequence&gt;
    			&lt;xsd:element name="message" type="xsd:string"/&gt;
    		&lt;/xsd:sequence&gt;
    	&lt;/xsd:complexType&gt;

2、添加wsdl:message
  &lt;wsdl:message name="Hello3WsException"&gt;
  	&lt;wsdl:part name="fault" element="tns:Hello3WsException"/&gt;
  &lt;/wsdl:message&gt;

3、添加portType
  &lt;wsdl:portType name="IHello3WsService"&gt;
    &lt;wsdl:operation name="sayHello"&gt;
      &lt;wsdl:input message="tns:sayHello"/&gt;
      &lt;wsdl:output message="tns:sayHelloResponse"/&gt;
      &lt;wsdl:fault name="Hello3WsException" message="tns:Hello3WsException"/&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:portType&gt;

4、添加binding
  &lt;wsdl:binding name="hello3WsSOAP" type="tns:IHello3WsService"&gt;
    &lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;
    &lt;wsdl:operation name="sayHello"&gt;
      &lt;wsdl:input&gt;
        &lt;soap:body use="literal"/&gt;
        &lt;soap:header use="literal" part="licenseInfo" message="tns:licenseInfo"/&gt;
      &lt;/wsdl:input&gt;
      &lt;wsdl:output&gt;
        &lt;soap:body use="literal"/&gt;
      &lt;/wsdl:output&gt;
      &lt;wsdl:fault name="Hello3WsException"&gt;
      	&lt;soap:fault name="Hello3WsException" use="literal"/&gt;
      &lt;/wsdl:fault&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:binding&gt;</plain></notes></topic><topic id="610v40uhqatbb9o8su5hi96qlc" timestamp="1384842334726"><title>4、重新生成客户端代码</title></topic></topics></children></topic><topic id="1h23qn7dhk2do9b8ah4ol296i7" timestamp="1384914854461"><title>3、handler</title><children><topics type="attached"><topic id="7vmbt8d42g8hipkd7l8rg0b4m6" timestamp="1384914851632"><title>1、server端配置handler</title><children><topics type="attached"><topic id="4kbji3qmj3196a3fonqrkfmfn8" timestamp="1384914639187" xlink:href="xap:attachments/5lijfcqllc7gj1quq094pqoj0q.java"><title>AuthValidationHandler.java</title></topic></topics></children><notes><html><xhtml:p>1、创建handler类，继承javax.xml.ws.handler.soap.SOAPHandler&lt;SOAPMessageContext&gt;</xhtml:p><xhtml:p>public boolean handleMessage(SOAPMessageContext context) {</xhtml:p><xhtml:p>    return true;</xhtml:p><xhtml:p>}</xhtml:p><xhtml:p/><xhtml:p>2、in 和 out 区分</xhtml:p><xhtml:p>		Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);</xhtml:p><xhtml:p/><xhtml:p/><xhtml:p>3、对特定的web service 调用请求验证</xhtml:p><xhtml:p>				SOAPMessage soapMessage = context.getMessage();</xhtml:p><xhtml:p>				SOAPEnvelope soapEnvelope = soapMessage.getSOAPPart().getEnvelope();</xhtml:p><xhtml:p>				</xhtml:p><xhtml:p>				SOAPBody body = soapEnvelope.getBody();</xhtml:p><xhtml:p>				String name = body.getFirstChild().getLocalName();</xhtml:p><xhtml:p>				if(!"sayHello".equals(name)){</xhtml:p><xhtml:p>					return true;</xhtml:p><xhtml:p>				}</xhtml:p><xhtml:p/><xhtml:p>4、返回false，拒绝处理，返回传入的soapmessage</xhtml:p><xhtml:p/></html><plain>1、创建handler类，继承javax.xml.ws.handler.soap.SOAPHandler&lt;SOAPMessageContext&gt;
public boolean handleMessage(SOAPMessageContext context) {
    return true;
}

2、in 和 out 区分
		Boolean outbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);


3、对特定的web service 调用请求验证
				SOAPMessage soapMessage = context.getMessage();
				SOAPEnvelope soapEnvelope = soapMessage.getSOAPPart().getEnvelope();
				
				SOAPBody body = soapEnvelope.getBody();
				String name = body.getFirstChild().getLocalName();
				if(!"sayHello".equals(name)){
					return true;
				}

4、返回false，拒绝处理，返回传入的soapmessage
</plain></notes></topic><topic id="7ojdren647jej2b3e7ki2lbv6p" timestamp="1384915076200"><title>2、client端配置handler</title><notes><html><xhtml:p>1、创建handler类，继承javax.xml.ws.handler.soap.SOAPHandler&lt;SOAPMessageContext&gt;</xhtml:p><xhtml:p/><xhtml:p>2、创建HandlerResolver类，实现接口javax.xml.ws.handler.HandlerResolver</xhtml:p><xhtml:p/><xhtml:p>3、修改配置文件</xhtml:p><xhtml:p>	&lt;bean id="hello3WsService" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"&gt;</xhtml:p><xhtml:p>	    &lt;property name="serviceInterface" value="com.lejingw.apps.ws31.IHello3WsService"/&gt;</xhtml:p><xhtml:p>	    &lt;property name="wsdlDocumentUrl" value="http://localhost:8080/lstzsb/Hello3Service?wsdl"/&gt;</xhtml:p><xhtml:p>	    &lt;property name="namespaceUri" value="http://ws3.apps.lejingw.com"/&gt;</xhtml:p><xhtml:p>	    &lt;property name="serviceName" value="Hello3WsService"/&gt;</xhtml:p><xhtml:p>	    &lt;property name="portName" value="Hello3WsServicePort"/&gt;</xhtml:p><xhtml:p>	    <xhtml:span style-id="2mtj5hflnq8ppbnh65jgg7da28">&lt;property name="handlerResolver" ref="mySOAPHandlerResolver"/&gt;</xhtml:span></xhtml:p><xhtml:p>	&lt;/bean&gt;</xhtml:p><xhtml:p/><xhtml:p>4、或者在web service类上添加@HandlerChain(file="handlers.xml")</xhtml:p></html><plain>1、创建handler类，继承javax.xml.ws.handler.soap.SOAPHandler&lt;SOAPMessageContext&gt;

2、创建HandlerResolver类，实现接口javax.xml.ws.handler.HandlerResolver

3、修改配置文件
	&lt;bean id="hello3WsService" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"&gt;
	    &lt;property name="serviceInterface" value="com.lejingw.apps.ws31.IHello3WsService"/&gt;
	    &lt;property name="wsdlDocumentUrl" value="http://localhost:8080/lstzsb/Hello3Service?wsdl"/&gt;
	    &lt;property name="namespaceUri" value="http://ws3.apps.lejingw.com"/&gt;
	    &lt;property name="serviceName" value="Hello3WsService"/&gt;
	    &lt;property name="portName" value="Hello3WsServicePort"/&gt;
	    &lt;property name="handlerResolver" ref="mySOAPHandlerResolver"/&gt;
	&lt;/bean&gt;

4、或者在web service类上添加@HandlerChain(file="handlers.xml")</plain></notes><children><topics type="attached"><topic id="43droama5s8mqb0rp29o5llbui" timestamp="1384914885351" xlink:href="xap:attachments/5m7ha74vmm572keej2birphrbk.java"><title>LicenseInfoHandler.java</title></topic><topic id="3fhpunkv24qsjupg2989b6pgbj" timestamp="1384914890301" xlink:href="xap:attachments/4aqrh5t7lsm2ujcfbcjbggfr2u.java"><title>MySOAPHandlerResolver.java</title></topic><topic id="4nstthk486lrmg5tpsdd8ght9n" timestamp="1384915076174" xlink:href="xap:attachments/76tb99dmgl0hsed9qgmh73lrnt.xml"><title>handlers.xml</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic><title>画布 1</title></sheet></xmap-revision-content>